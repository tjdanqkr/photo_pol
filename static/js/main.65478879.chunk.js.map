{"version":3,"sources":["store/hooks.ts","store/themeMode/index.ts","components/layout/Headers.tsx","style/theme.ts","style/global-style.ts","img/logo.svg","store/toggle/index.ts","components/home/Home.tsx","components/layout/Table/TableHeader.tsx","components/layout/Table/TableBody.tsx","components/layout/Table/TableFilter.tsx","components/layout/Table/TableForm.tsx","components/skill/Corona/CoronaMap.tsx","store/lotto/index.ts","components/skill/Lotto/LottoQr.tsx","components/skill/Lotto/LottoMyNumber.tsx","components/skill/Lotto/LottoAnalyze.tsx","components/skill/Lotto/LottoRecommend.tsx","components/skill/Lotto/LottoTemplate.tsx","router/index.tsx","components/layout/Footer.tsx","App.tsx","reportWebVitals.ts","api/corona.ts","store/corona/coronaSaga.ts","store/saga/index.ts","store/corona/index.ts","store/index.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","mode","localStorage","getItem","themeSlice","createSlice","name","reducers","darkMode","state","setItem","lightMode","actions","HeaderForm","styled","div","Headers","theme","dispatch","Navbar","collapseOnSelect","expand","bg","variant","sticky","Container","style","fontWeight","Brand","as","Link","to","Toggle","Collapse","id","Nav","className","NavDropdown","title","Item","Button","onClick","darktheme","mainBackground","color","primaryText","secondaryText","disable","border","divider","background","tableHeader","oddBackground","response","lighttheme","GlobalStyle","createGlobalStyle","toggleSlice","img","alt","open","content","onClickToggle","action","payload","Title","H2","H1","TitleText","p","TitleBox","GrayBox","LogoForm","RelativeBox","TechTitle","b","ContentForm","ContentTitle","ContentSub","ToggleArrow","ToggleItemTemplate","ToggleScroll","ToggleItem","Home","toggle","Row","Col","md","fluid","src","logosvg","map","data","i","process","width","height","con","textAlign","length","sub","TableTr","TableTd","TableHeader","props","hedearList","size","TableTrOdd","TableBodyForm","cache","CellMeasurerCache","defaultWidth","fixedWidth","TableBody","renderList","listRef","useRef","Column","index","key","parent","rowData","columnIndex","rowIndex","onScroll","e","target","scrollTop","scrollLeft","Grid","current","handleScrollEvent","handleScroll","autoHide","ref","overscanRowCount","rowCount","rowHeight","rowRenderer","deferredMeasurementCache","containerStyle","overflow","TableFilter","TableForm","getList","CoronaMap","corona","getCorona","useCallback","type","useEffect","filterType","custom","lottoSlice","lottoList","suggestion","statisticsNumDesc","statisticsAppDesc","activeKey","camera","toast","recommendList","top5List","notExistList","LOTTOADD","myLottoList","obj","round","url","push","LOTTOREMOVE","newActiveKey","filter","splice","LOTTOANALYZE","statisticsList","forEach","list","flat","num","findI","findIndex","statistics","appearance","NumDesc","sort","a","AppDesc","makeTop5List","makeNotExistList","LOTTOACTIVEKEY","LOTTOCAMERA","LOTTOTOASTCLOSE","LOTTORECOMMEND","check","checkList","topRandomNumber","makeTopRandomNumber","existRandomNumber","makeExistRandomNumber","notExistRandomNumber","makeNotExistRandomNumber","randomNumber1","makeRandomNumber","randomNumber2","filterdata","JSON","stringify","some","countAppearance","countNum","listLength","useUnit","Math","floor","random","pass","arrs","choiseNumber","randomPopNumber","deduplicationFunc","testList","console","log","myLotto","LottoQr","lotto","useState","domain","setDomain","setRedux","scanResult","queryData","split","Number","numberList","slice","myNumberListFunc","myNumberList","error","Numbers","substr","Toast","onClose","show","delay","autohide","Body","onError","err","onScan","test","Accordion","AccordionForm","AccordionBody","AccordionRemoveButton","AccordionHeader","unselectable","AccordionHeaderButton","button","LottoMyNumber","undefined","find","Table","striped","bordered","hover","numbers","number","BoxForm","LottoAnalyze","setNumberList","setNumberListFuntion","List","findObj","ButtonBox","Rotate","LottoRecommend","onClickRecommend","Box","LottoQrTemplate","ControlRoute","exact","path","FooterComponent","FooterTitle","h2","FooterText","Footer","MyContainer","Main","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","axios","defaults","baseURL","coronaApi","start","get","res","callCoronaApi","getCoronaApi","call","put","Error","message","takeEvery","rootSaga","all","maxLength","SUSSESS_CORONA","concatList","concat","FAIL_CORONA","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","themeMode","devTools","middleware","run","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65478879.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport type { RootState } from '../../store';\r\n\r\n// Define a type for the slice state\r\ninterface ThemeState {\r\n  mode: 'dark' | 'light';\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: ThemeState = {\r\n  mode: localStorage.getItem('mode') === 'dark' ? 'dark' : 'light',\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n  name: 'theme',\r\n  initialState,\r\n  reducers: {\r\n    darkMode: (state) => {\r\n      localStorage.setItem('mode', 'dark');\r\n      state.mode = 'dark';\r\n    },\r\n    lightMode: (state) => {\r\n      localStorage.setItem('mode', 'light');\r\n      state.mode = 'light';\r\n    },\r\n  },\r\n});\r\n\r\nexport const { darkMode, lightMode } = themeSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectTheme = (state: RootState) => state.theme.mode;\r\n\r\nexport default themeSlice.reducer;\r\n","import { Container, Nav, Navbar, NavDropdown, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { darkMode, lightMode } from '../../store/themeMode';\r\nconst HeaderForm = styled.div`\r\n  font-weight: bolder;\r\n`;\r\nfunction Headers() {\r\n  const mode = useAppSelector((state) => state.theme.mode);\r\n  const dispatch = useAppDispatch();\r\n  return (\r\n    <HeaderForm>\r\n      <Navbar\r\n        collapseOnSelect\r\n        expand=\"md\"\r\n        bg={mode}\r\n        variant={mode}\r\n        sticky=\"top\"\r\n      >\r\n        <Container style={{ fontWeight: 'bolder' }}>\r\n          <Navbar.Brand as={Link} to=\"/\">\r\n            <h2>\r\n              <b>박성무의 경력기술서</b>\r\n            </h2>\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"me-auto\">\r\n              <Nav.Link as={Link} to=\"/userlog\">\r\n                <strong>profile</strong>\r\n              </Nav.Link>\r\n\r\n              <Nav.Link as={Link} to=\"/userlog\"></Nav.Link>\r\n              <NavDropdown title=\"skill\" id=\"collasible-nav-dropdown\">\r\n                <NavDropdown.Item as={Link} to=\"/skill/1\">\r\n                  corona\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item as={Link} to=\"/skill/2\">\r\n                  Lotto\r\n                </NavDropdown.Item>\r\n              </NavDropdown>\r\n              <Nav.Link as={Link} to=\"/userlog\">\r\n                <strong>self-introduction</strong>\r\n              </Nav.Link>\r\n              <Nav.Link as={Link} to=\"/userlog\">\r\n                <strong>etc</strong>\r\n              </Nav.Link>\r\n              {/* <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">\r\n                Another action\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">\r\n                Separated link\r\n              </NavDropdown.Item>\r\n            </NavDropdown> */}\r\n            </Nav>\r\n            <Nav>\r\n              <Button\r\n                variant={mode === 'dark' ? 'secondary' : 'dark'}\r\n                onClick={() => {\r\n                  mode === 'dark'\r\n                    ? dispatch(lightMode())\r\n                    : dispatch(darkMode());\r\n                }}\r\n              >\r\n                {mode === 'dark' ? 'light' : 'dark'}\r\n              </Button>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </HeaderForm>\r\n  );\r\n}\r\n\r\nexport default Headers;\r\n","import { DefaultTheme } from 'styled-components';\r\n\r\nconst darktheme: DefaultTheme = {\r\n  mainBackground: `#333`,\r\n\r\n  color: `rgba(255,255,255,0.85)`,\r\n  title: `rgba(255,255,255,0.85)`,\r\n  primaryText: `rgba(255,255,255,0.65)`,\r\n  secondaryText: `rgba(255,255,255,0.45)`,\r\n  disable: `rgba(255,255,255,0.25)`,\r\n  border: `rgba(255,255,255,0.15)`,\r\n  divider: `rgba(255,255,255,0.06)`,\r\n  background: `rgba(255,255,255,0.04)`,\r\n  tableHeader: `rgba(255,255,255,0.02)`,\r\n  oddBackground: `rgba(0, 0, 0, 0.85)`,\r\n  response: {},\r\n};\r\n\r\nconst lighttheme: DefaultTheme = {\r\n  mainBackground: `#fff`,\r\n\r\n  color: `rgba(0, 0, 0, 0.85)`,\r\n  title: `rgba(0, 0, 0, 0.85)`,\r\n  primaryText: `rgba(0, 0, 0, 0.75)`,\r\n  secondaryText: `rgba(0, 0, 0, 0.45)`,\r\n  disable: `rgba(0, 0, 0, 0.25)`,\r\n  border: `rgba(0, 0, 0, 0.15)`,\r\n  divider: `rgba(0, 0, 0, 0.06)`,\r\n  background: `rgba(0, 0, 0, 0.04)`,\r\n  tableHeader: `rgba(0, 0, 0, 0.02)`,\r\n  oddBackground: `rgba(255,255,255,0.85)`,\r\n\r\n  response: {},\r\n};\r\n\r\nexport { darktheme, lighttheme };\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  html,\r\n  body {\r\n    height: 100%;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"../../store\";\r\n\r\nconst initialState = [\r\n  {\r\n    img: \"img/toggleImg/db.png\",\r\n    alt: \"DB\",\r\n    open: false,\r\n    content: [\r\n      {\r\n        img: \"/img/ProfilesIcons/DB/mongoDB.png\",\r\n        alt: \"MongoDB\",\r\n      },\r\n      {\r\n        img: \"/img/ProfilesIcons/DB/MySQL-Logo.png\",\r\n        alt: \"MySQL\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    img: \"img/toggleImg/windows.png\",\r\n    alt: \"OS\",\r\n    open: false,\r\n    content: [\r\n      {\r\n        img: \"img/ProfilesIcons/OS/Windows_logo.png\",\r\n        alt: \"Windows\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/OS/linux_logo.png\",\r\n        alt: \"Linux\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    img: \"img/toggleImg/programing.png\",\r\n    alt: \"언어\",\r\n    open: false,\r\n    content: [\r\n      {\r\n        img: \"img/ProfilesIcons/lang/JavaScript.png\",\r\n        alt: \"JavaScript\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/ts.png\",\r\n        alt: \"TypeScript\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/Java_Logo.png\",\r\n        alt: \"Java\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/python-logo.png\",\r\n        alt: \"Python\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/css.png\",\r\n        alt: \"Css\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/HTML5.png\",\r\n        alt: \"HTML5\",\r\n      },\r\n\r\n      {\r\n        img: \"img/ProfilesIcons/lang/Expressjs.png\",\r\n        alt: \"Express\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/react.png\",\r\n        alt: \"React\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/nextjs.png\",\r\n        alt: \"Next\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/Spring_Framework_Logo.png\",\r\n        alt: \"Spring\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/Vert.x_Logo.png\",\r\n        alt: \"Vert.x\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    img: \"img/toggleImg/agile.png\",\r\n    alt: \"기타\",\r\n    open: false,\r\n    content: [\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/bootstrap.jpg\",\r\n        alt: \"Bootstrap\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/git_and_github_logo.png\",\r\n        alt: \"Git\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/kakao_map_api.jpg\",\r\n        alt: \"KakaoMapApi\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/navermapApi.png\",\r\n        alt: \"NaverMapApi\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/Redux_Logo.png\",\r\n        alt: \"Redux\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/redux-toolkit.png\",\r\n        alt: \"ReduxToolkit\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/styled-components.png\",\r\n        alt: \"Styled-components\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport const toggleSlice = createSlice({\r\n  name: \"toggle\",\r\n  initialState,\r\n  reducers: {\r\n    onClickToggle: (state, action) => {\r\n      state[action.payload].open = !state[action.payload].open;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { onClickToggle } = toggleSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectTheme = (state: RootState) => state.toggle;\r\n\r\nexport default toggleSlice.reducer;\r\n","import { Col, Row, Container } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\nimport logosvg from \"../../img/logo.svg\";\r\nimport { useAppDispatch, useAppSelector } from \"../../store/hooks\";\r\nimport { onClickToggle } from \"../../store/toggle\";\r\nimport \"./Home.css\";\r\nconst Title = styled.div`\r\n  background-color: #212529;\r\n  color: white;\r\n  padding-top: 3em;\r\n  padding-bottom: 3em;\r\n`;\r\nconst H2 = styled.div`\r\n  font-size: 2em;\r\n  font-weight: bold;\r\n`;\r\nconst H1 = styled.div`\r\n  font-size: 2.5em;\r\n  font-weight: bold;\r\n`;\r\nconst TitleText = styled.p`\r\n  color: #e2e2e2;\r\n`;\r\nconst TitleBox = styled.div`\r\n  display: flex;\r\n  align-items: flex-end;\r\n  flex-wrap: wrap;\r\n`;\r\nconst GrayBox = styled.div`\r\n  background-color: #e2e2e2;\r\n  margin-left: 2em;\r\n  margin-right: 2em;\r\n  margin-top: 3em;\r\n  margin-bottom: 3em;\r\n  padding: 1em 4em;\r\n  border-radius: 1em;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  color: black;\r\n`;\r\nconst LogoForm = styled.div`\r\n  position: absolute;\r\n  transform: translate(-1em, -4em);\r\n`;\r\nconst RelativeBox = styled.div`\r\n  position: relative;\r\n  width: 7em;\r\n`;\r\n\r\nconst TechTitle = styled.b`\r\n  font-size: 1.5em;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst ContentForm = styled.div`\r\n  display: flex;\r\n  margin-right: 20 px;\r\n  margin-bottom: 20 px;\r\n  flex-direction: column;\r\n  align-items: stretch;\r\n  height: 30em;\r\n  padding: 3em;\r\n`;\r\n\r\nconst ContentTitle = styled.div`\r\n  font-size: 2em;\r\n`;\r\n\r\nconst ContentSub = styled.div`\r\n  background-color: #b7a9ff;\r\n  height: 100%;\r\n  border-radius: 1em;\r\n  padding: 2em;\r\n`;\r\nconst ToggleArrow = styled.div`\r\n  height: 12px;\r\n  width: 12px;\r\n  transition: all ease 1s;\r\n`;\r\n\r\nconst ToggleItemTemplate = styled.div`\r\n  border-radius: 0 0 2em 2em;\r\n  background-color: #bfbfbf;\r\n  margin: 20px;\r\n  position: relative;\r\n  min-height: 15em;\r\n  max-height: 25em;\r\n  color: black;\r\n  transform: translate(0, -3em);\r\n  z-index: 0;\r\n\r\n  padding: 2em;\r\n  padding-top: 3em;\r\n`;\r\nconst ToggleScroll = styled.div`\r\n  overflow-y: scroll;\r\n  max-height: 15em;\r\n  &::-webkit-scrollbar {\r\n    /* 스크롤바 막대 너비 설정 */\r\n    width: 6px;\r\n  } /* 스크롤바 막대 설정*/\r\n  &::-webkit-scrollbar-thumb {\r\n    /* 스크롤바 막대 높이 설정 */\r\n    height: 17%;\r\n    background-color: #7d7d7d; /* 스크롤바 둥글게 설정 */\r\n    border-radius: 10px;\r\n  } /* 스크롤바 뒷 배경 설정*/\r\n  &::-webkit-scrollbar-track {\r\n    background-color: rgba(0, 0, 0, 0);\r\n  }\r\n`;\r\nconst ToggleItem = styled.div`\r\n  color: black;\r\n  text-align: center;\r\n`;\r\n\r\ntype content = {\r\n  title: string;\r\n  sub: string;\r\n}[];\r\n\r\nfunction Home() {\r\n  const toggle = useAppSelector((state) => state.toggle);\r\n  const dispatch = useAppDispatch();\r\n  const contentList: content = [\r\n    {\r\n      title: \"1111\",\r\n      sub: \"1111\",\r\n    },\r\n    {\r\n      title: \"2222\",\r\n      sub: \"2222\",\r\n    },\r\n    {\r\n      title: \"3333\",\r\n      sub: \"3333\",\r\n    },\r\n    {\r\n      title: \"4444\",\r\n      sub: \"4444\",\r\n    },\r\n  ];\r\n\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <Row>\r\n          <Col md={12}>\r\n            <Title>\r\n              <Container fluid=\"md\">\r\n                <TitleBox>\r\n                  <H2>실력있는 웹 개발자는&nbsp;</H2> <H1>페이지로&nbsp;</H1>\r\n                  <H2>말한다!</H2>\r\n                </TitleBox>\r\n                <br></br>\r\n                <TitleText>\r\n                  &nbsp;&nbsp;개발자 \"박성무\"만의 사이트를 만들어 말로 설명하지\r\n                  않아도 설득력이 있는 개발자가 되기 위해 경력기술서 사이트를\r\n                  제작하였습니다.\r\n                </TitleText>\r\n              </Container>\r\n            </Title>\r\n          </Col>\r\n        </Row>\r\n      </section>\r\n      <Container fluid=\"md\">\r\n        <section>\r\n          <Row>\r\n            <Col md={12}>\r\n              <GrayBox>\r\n                <strong>현재 페이지는 react를 사용하여 만들어졌습니다.</strong>\r\n                <RelativeBox>\r\n                  <LogoForm>\r\n                    <img src={logosvg} className=\"App-logo\" alt=\"logo\" />\r\n                  </LogoForm>\r\n                </RelativeBox>\r\n              </GrayBox>\r\n            </Col>\r\n          </Row>\r\n        </section>\r\n        <section>\r\n          <Row>\r\n            <Col md={1}></Col>\r\n            <Col md={10}>\r\n              <TechTitle>현재 박성무의 사용기술</TechTitle>\r\n            </Col>\r\n            <Col md={1}></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={1}></Col>\r\n            <Col md={10}>\r\n              <Row>\r\n                {toggle.map((data, i) => (\r\n                  <Col md={6} key={i}>\r\n                    <div\r\n                      className={data.open ? \"ToggleBoxActive\" : \"ToggleBox\"}\r\n                      onClick={() => dispatch(onClickToggle(i))}\r\n                    >\r\n                      <img\r\n                        src={`${process.env.PUBLIC_URL}/${data.img}`}\r\n                        style={{ width: \"100px\", height: \"100px\" }}\r\n                        alt={data.alt}\r\n                      ></img>\r\n                      <h3>\r\n                        <b>{data.alt}</b>\r\n                      </h3>\r\n                      <ToggleArrow>{data.open ? `▲` : `▼`}</ToggleArrow>\r\n                    </div>\r\n                    {data.open ? (\r\n                      <ToggleItemTemplate>\r\n                        <ToggleScroll>\r\n                          {data.content.map((con, i) => (\r\n                            <ToggleItem key={i} style={{ textAlign: \"center\" }}>\r\n                              <img\r\n                                src={`${process.env.PUBLIC_URL}/${con.img}`}\r\n                                alt={con.alt}\r\n                                style={{ width: \"100%\" }}\r\n                              ></img>\r\n                              <b>{`<${con.alt}>`}</b>\r\n                              {data.content.length !== i + 1 ? <hr></hr> : null}\r\n                            </ToggleItem>\r\n                          ))}\r\n                        </ToggleScroll>\r\n                      </ToggleItemTemplate>\r\n                    ) : null}\r\n                  </Col>\r\n                ))}\r\n              </Row>\r\n            </Col>\r\n            <Col md={1}></Col>\r\n          </Row>\r\n        </section>\r\n        <section>\r\n          <Row>\r\n            {contentList.map((data, i) => (\r\n              <Col md={6} key={i}>\r\n                <ContentForm>\r\n                  <ContentTitle>{data.title}</ContentTitle>\r\n                  <ContentSub>{data.sub}</ContentSub>\r\n                </ContentForm>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </section>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import styled from 'styled-components';\r\nimport { TableHeaderType } from './TableForm';\r\n\r\ntype HeaderProps = {\r\n  hedearList: TableHeaderType[];\r\n  width: number;\r\n};\r\n\r\nconst TableTr = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: stretch;\r\n  background-color: white;\r\n  color: black;\r\n  font-weight: bold;\r\n  position: sticky;\r\n`;\r\n\r\nconst TableTd = styled.div`\r\n  border: 1px outset gray;\r\n  border-collapse: collapse;\r\n  padding: 5px;\r\n  font-size: 2em;\r\n`;\r\nfunction TableHeader(props: HeaderProps) {\r\n  const { hedearList, width } = props;\r\n  return (\r\n    <TableTr style={{ width }}>\r\n      {hedearList.map((data, i) => {\r\n        return (\r\n          <TableTd key={i} style={{ width: `${data.size}%` }}>\r\n            {data.name}\r\n          </TableTd>\r\n        );\r\n      })}\r\n    </TableTr>\r\n  );\r\n}\r\nexport default TableHeader;\r\n","import { useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { TableHeaderType } from './TableForm';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport {\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n  List,\r\n  ListRowProps,\r\n  Size,\r\n} from 'react-virtualized';\r\nimport TableHeader from './TableHeader';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\ntype TableProps = {\r\n  renderList: any[];\r\n  hedearList: TableHeaderType[];\r\n  getList: string;\r\n};\r\n\r\nconst TableTr = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: stretch;\r\n  background-color: white;\r\n  color: black;\r\n  font-weight: bold;\r\n  &:hover {\r\n    background-color: aliceblue;\r\n  }\r\n`;\r\n\r\nconst TableTrOdd = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: stretch;\r\n  background-color: #e0e0e0;\r\n  color: black;\r\n  font-weight: bold;\r\n  &:hover {\r\n    background-color: aliceblue;\r\n  }\r\n`;\r\n\r\nconst TableTd = styled.div`\r\n  border: 1px outset gray;\r\n  border-collapse: collapse;\r\n  padding: 5px;\r\n`;\r\nconst TableBodyForm = styled.div`\r\n  height: 1000px;\r\n  overflow: hidden;\r\n`;\r\nconst cache = new CellMeasurerCache({\r\n  defaultWidth: 100,\r\n  fixedWidth: true,\r\n});\r\n\r\nconst TableBody = (props: TableProps) => {\r\n  const { renderList, hedearList } = props;\r\n  const listRef = useRef<List | null>(null);\r\n  const handleScroll = (e: any) => {\r\n    const { scrollTop, scrollLeft } = e.target;\r\n    const Grid = listRef.current?.Grid;\r\n    Grid?.handleScrollEvent({ scrollTop, scrollLeft });\r\n  };\r\n\r\n  const Column = ({ index, key, parent, style }: ListRowProps) => {\r\n    const rowData = renderList[index];\r\n\r\n    return (\r\n      <CellMeasurer\r\n        cache={cache}\r\n        parent={parent}\r\n        key={key}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n      >\r\n        {index % 2 === 0 ? (\r\n          <TableTr style={style}>\r\n            {hedearList.map((data, i) => {\r\n              return (\r\n                <TableTd key={i} style={{ width: `${data.size}%` }}>\r\n                  {rowData[data.key]}\r\n                </TableTd>\r\n              );\r\n            })}\r\n          </TableTr>\r\n        ) : (\r\n          <TableTrOdd style={style}>\r\n            {hedearList.map((data, i) => {\r\n              return (\r\n                <TableTd key={i} style={{ width: `${data.size}%` }}>\r\n                  {rowData[data.key]}\r\n                </TableTd>\r\n              );\r\n            })}\r\n          </TableTrOdd>\r\n        )}\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <TableBodyForm>\r\n      {/* <WindowScroller>\r\n        {({ height, scrollTop, isScrolling, onChildScroll }) => ( */}\r\n      <AutoSizer>\r\n        {({ width, height }: Size) => {\r\n          return (\r\n            <>\r\n              <TableHeader hedearList={hedearList} width={width}></TableHeader>\r\n              <Scrollbars\r\n                onScroll={(e) => handleScroll(e)}\r\n                style={{ height, width }}\r\n                autoHide\r\n              >\r\n                <List\r\n                  ref={listRef}\r\n                  height={height}\r\n                  width={width}\r\n                  // isScrolling={isScrolling}\r\n                  overscanRowCount={0}\r\n                  // onScroll={onChildScroll}\r\n                  // scrollTop={scrollTop}\r\n                  rowCount={renderList.length}\r\n                  rowHeight={cache.rowHeight}\r\n                  rowRenderer={Column}\r\n                  deferredMeasurementCache={cache}\r\n                  containerStyle={{ overflow: 'initial' }}\r\n                ></List>\r\n              </Scrollbars>\r\n            </>\r\n          );\r\n        }}\r\n      </AutoSizer>\r\n      {/* )}\r\n       </WindowScroller> */}\r\n    </TableBodyForm>\r\n  );\r\n};\r\nexport default TableBody;\r\n","import { TableHeaderType } from './TableForm';\r\n\r\ntype FilterProps = {\r\n  name: string;\r\n  hedearList: TableHeaderType[];\r\n};\r\n\r\nfunction TableFilter(props: FilterProps) {\r\n  return <div></div>;\r\n}\r\nexport default TableFilter;\r\n","import TableBody from './TableBody';\r\nimport TableFilter from './TableFilter';\r\n\r\ntype TableProps = {\r\n  renderList: any[];\r\n  hedearList: TableHeaderType[];\r\n  name: string;\r\n  getList: string;\r\n};\r\nexport type TableHeaderType = {\r\n  name: string;\r\n  key: string;\r\n  custom: boolean;\r\n  filterType: string;\r\n  size: number;\r\n  customFuncName?: string;\r\n};\r\n\r\nfunction TableForm(props: TableProps) {\r\n  const { hedearList, name, renderList, getList } = props;\r\n  return (\r\n    <div>\r\n      <TableFilter hedearList={hedearList} name={name}></TableFilter>\r\n      <TableBody\r\n        renderList={renderList}\r\n        hedearList={hedearList}\r\n        getList={getList}\r\n      ></TableBody>\r\n    </div>\r\n  );\r\n}\r\nexport default TableForm;\r\n","import { useCallback, useEffect } from 'react';\r\nimport { Col, Row, Container } from 'react-bootstrap';\r\nimport { useAppDispatch, useAppSelector } from '../../../store/hooks';\r\nimport TableForm, { TableHeaderType } from '../../layout/Table/TableForm';\r\n\r\nfunction CoronaMap() {\r\n  const corona = useAppSelector((state) => state.corona.corona);\r\n  const index = useAppSelector((state) => state.corona.index);\r\n  const coronaHeader: TableHeaderType[] = [\r\n    {\r\n      key: 'CORONA19_DATE',\r\n      name: '확진일',\r\n      size: 10,\r\n      filterType: 'date',\r\n      custom: false,\r\n    },\r\n    // {\r\n    //   key: 'CORONA19_NO',\r\n    //   name: '환자번호',\r\n    //   size: 5,\r\n    //   filterType: 'number',\r\n    //   custom: false,\r\n    // },\r\n    {\r\n      key: 'CORONA19_COUNTRY',\r\n      name: '국적',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n\r\n    {\r\n      key: 'CORONA19_PERSONAL',\r\n      name: '환자정보',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_AREA',\r\n      name: '지역',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_TRAVEL_HISTORY',\r\n      name: '여행력',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_CONTACT_HISTORY',\r\n      name: '접촉력',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_CORRECTIVE',\r\n      name: '조치사항',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_LEAVE_STATUS',\r\n      name: '상태',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_MOVING_PATH',\r\n      name: '이동경로',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_IDATE',\r\n      name: '등록일',\r\n      size: 10,\r\n      filterType: 'date',\r\n      custom: false,\r\n    },\r\n  ];\r\n  const dispatch = useAppDispatch();\r\n  const getCorona = useCallback(() => {\r\n    dispatch({\r\n      type: 'GET_CORONA',\r\n      index,\r\n    });\r\n  }, [dispatch, index]);\r\n  useEffect(() => {\r\n    if (corona.length === 0) {\r\n      getCorona();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Container fluid=\"md\">\r\n      <Row>\r\n        <Col md={12}>\r\n          <TableForm\r\n            hedearList={coronaHeader}\r\n            name=\"corona\"\r\n            renderList={corona}\r\n            getList=\"GET_CORONA\"\r\n          ></TableForm>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CoronaMap;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport type { RootState } from '../../store';\r\n\r\n// Define a type for the slice state\r\n\r\ntype statisticsType = {\r\n  num: number;\r\n  appearance: number;\r\n};\r\ntype myLottoList = {\r\n  round: number;\r\n  myLottoList: number[][];\r\n  url: string;\r\n};\r\n\r\ninterface LottoState {\r\n  lottoList: myLottoList[];\r\n  suggestion: number[][];\r\n  statisticsNumDesc: statisticsType[];\r\n  statisticsAppDesc: statisticsType[];\r\n  activeKey: number[];\r\n  camera: boolean;\r\n  toast: boolean;\r\n  recommendList: number[][];\r\n  top5List: number[];\r\n  notExistList: number[];\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: LottoState = {\r\n  lottoList: [],\r\n  suggestion: [],\r\n  statisticsNumDesc: [],\r\n  statisticsAppDesc: [],\r\n  activeKey: [],\r\n  camera: true,\r\n  toast: false,\r\n  recommendList: [],\r\n  top5List: [],\r\n  notExistList: [],\r\n};\r\n\r\ninterface IPayLoadLottoState {\r\n  round: number;\r\n  myLottoList: number[][];\r\n  url: string;\r\n}\r\ninterface IPayLoadActiveKeyState {\r\n  key: number;\r\n  type: 'open' | 'close';\r\n}\r\ninterface IPayLoadRemoveState {\r\n  key: number;\r\n}\r\n\r\nexport const lottoSlice = createSlice({\r\n  name: 'lotto',\r\n  initialState,\r\n  reducers: {\r\n    LOTTOADD: (state, action: PayloadAction<IPayLoadLottoState>) => {\r\n      const { myLottoList, round, url } = action.payload;\r\n      const obj = { round, myLottoList, url };\r\n      state.lottoList.push(obj);\r\n      state.toast = true;\r\n    },\r\n    LOTTOREMOVE: (state, action: PayloadAction<IPayLoadRemoveState>) => {\r\n      const { activeKey, lottoList } = state;\r\n      const { key } = action.payload;\r\n      const newActiveKey = activeKey\r\n        .filter((data) => data !== key)\r\n        .map((data) => (data > key ? data - 1 : data));\r\n      state.activeKey = newActiveKey;\r\n      lottoList.splice(key, 1);\r\n    },\r\n    LOTTOANALYZE: (state) => {\r\n      //많이 나온숫자 랑 적게 나온수\r\n      const { lottoList } = state;\r\n      let statisticsList: statisticsType[] = [];\r\n      lottoList.forEach((list) => {\r\n        list.myLottoList.flat().forEach((num) => {\r\n          const findI = statisticsList.findIndex(\r\n            (statistics) => statistics.num === num,\r\n          );\r\n          findI > -1\r\n            ? statisticsList[findI].appearance++\r\n            : statisticsList.push({ num, appearance: 1 });\r\n        });\r\n      });\r\n      const NumDesc = statisticsList.sort((a, b) => a.num - b.num);\r\n      const AppDesc = statisticsList.sort(\r\n        (a, b) => b.appearance - a.appearance,\r\n      );\r\n      state.statisticsNumDesc = NumDesc;\r\n      state.statisticsAppDesc = AppDesc;\r\n      state.top5List = makeTop5List(NumDesc);\r\n      state.notExistList = makeNotExistList(AppDesc);\r\n    },\r\n    LOTTOACTIVEKEY: (state, action: PayloadAction<IPayLoadActiveKeyState>) => {\r\n      let { activeKey } = state;\r\n      const { key, type } = action.payload;\r\n\r\n      if (type === 'close') {\r\n        state.activeKey = activeKey.filter((data) => data !== key);\r\n      } else {\r\n        activeKey.push(key);\r\n      }\r\n    },\r\n    LOTTOCAMERA: (state) => {\r\n      state.camera = !state.camera;\r\n    },\r\n    LOTTOTOASTCLOSE: (state) => {\r\n      state.toast = false;\r\n    },\r\n    LOTTORECOMMEND: (state) => {\r\n      const { lottoList, statisticsNumDesc, notExistList, top5List } = state;\r\n      let check = false;\r\n      let checkList: number[][] = [];\r\n      while (check) {\r\n        const topRandomNumber = makeTopRandomNumber(lottoList, top5List);\r\n        const existRandomNumber = makeExistRandomNumber(\r\n          lottoList,\r\n          statisticsNumDesc,\r\n        );\r\n        const notExistRandomNumber = makeNotExistRandomNumber(\r\n          lottoList,\r\n          notExistList,\r\n        );\r\n        const randomNumber1 = makeRandomNumber(lottoList);\r\n        const randomNumber2 = makeRandomNumber(lottoList);\r\n        checkList = [\r\n          topRandomNumber,\r\n          existRandomNumber,\r\n          notExistRandomNumber,\r\n          randomNumber1,\r\n          randomNumber2,\r\n        ];\r\n        const checkArr = checkList.map(\r\n          (data) =>\r\n            checkList.filter(\r\n              (filterdata) =>\r\n                JSON.stringify(data) === JSON.stringify(filterdata),\r\n            ).length > 1,\r\n        );\r\n        check = checkArr.some((data) => data === true);\r\n      }\r\n      state.recommendList = checkList;\r\n      //final check\r\n    },\r\n  },\r\n});\r\n\r\nconst makeTop5List = (statisticsNumDesc: statisticsType[]) => {\r\n  const maxCount = 5;\r\n\r\n  let countAppearance = statisticsNumDesc[0].appearance;\r\n  let top5List: number[] = [];\r\n  while (top5List.length > maxCount) {\r\n    const countNum = statisticsNumDesc.filter(\r\n      (data) => countAppearance === data.appearance,\r\n    );\r\n\r\n    countAppearance--;\r\n    countNum.forEach((data) => {\r\n      top5List.push(data.num);\r\n    });\r\n  }\r\n  return top5List;\r\n};\r\nconst makeNotExistList = (statisticsAppDesc: statisticsType[]) => {\r\n  return statisticsAppDesc\r\n    .filter((data) => data.appearance === 0)\r\n    .map((data) => data.num);\r\n};\r\n\r\nconst makeTopRandomNumber = (lottoList: myLottoList[], top5List: number[]) => {\r\n  const listLength = top5List.length;\r\n  const maxLength = 6;\r\n  const maxNumber = 45;\r\n  const useUnit = Math.floor(listLength * Math.random() + 1);\r\n  let pass = false;\r\n  let arrs: number[] = [];\r\n  while (pass) {\r\n    arrs = [];\r\n    for (let i = 0; i < maxLength; i++) {\r\n      let choiseNumber = 0;\r\n      const randomPopNumber = Math.floor(listLength * Math.random());\r\n      if (i < useUnit) {\r\n        choiseNumber = top5List[randomPopNumber];\r\n      } else {\r\n        choiseNumber = Math.floor(maxNumber * Math.random() + 1);\r\n      }\r\n      arrs.some((data) => data === choiseNumber)\r\n        ? i--\r\n        : arrs.push(choiseNumber);\r\n    }\r\n    arrs.sort((a, b) => a - b);\r\n    pass = deduplicationFunc(lottoList, arrs);\r\n  }\r\n  return arrs;\r\n};\r\nconst makeExistRandomNumber = (\r\n  lottoList: myLottoList[],\r\n  statisticsNumDesc: statisticsType[],\r\n) => {\r\n  const listLength = statisticsNumDesc.length;\r\n  const maxLength = 6;\r\n  const maxNumber = 45;\r\n  const useUnit = Math.floor(listLength * Math.random() + 1);\r\n  let pass = false;\r\n  let arrs: number[] = [];\r\n  while (pass) {\r\n    arrs = [];\r\n    for (let i = 0; i < maxLength; i++) {\r\n      let choiseNumber = 0;\r\n      const randomPopNumber = Math.floor(listLength * Math.random());\r\n      if (i < useUnit) {\r\n        choiseNumber = statisticsNumDesc[randomPopNumber].num;\r\n      } else {\r\n        choiseNumber = Math.floor(maxNumber * Math.random() + 1);\r\n      }\r\n      arrs.some((data) => data === choiseNumber)\r\n        ? i--\r\n        : arrs.push(choiseNumber);\r\n    }\r\n    arrs.sort((a, b) => a - b);\r\n    pass = deduplicationFunc(lottoList, arrs);\r\n  }\r\n  return arrs;\r\n};\r\nconst makeNotExistRandomNumber = (\r\n  lottoList: myLottoList[],\r\n  notExistList: number[],\r\n) => {\r\n  const listLength = notExistList.length;\r\n  const maxLength = 6;\r\n  const maxNumber = 45;\r\n  const useUnit = Math.floor(listLength * Math.random() + 1);\r\n  let pass = false;\r\n  let arrs: number[] = [];\r\n  while (pass) {\r\n    arrs = [];\r\n    for (let i = 0; i < maxLength; i++) {\r\n      let choiseNumber = 0;\r\n      const randomPopNumber = Math.floor(listLength * Math.random());\r\n      if (i < useUnit) {\r\n        choiseNumber = notExistList[randomPopNumber];\r\n      } else {\r\n        choiseNumber = Math.floor(maxNumber * Math.random() + 1);\r\n      }\r\n      arrs.some((data) => data === choiseNumber)\r\n        ? i--\r\n        : arrs.push(choiseNumber);\r\n    }\r\n    arrs.sort((a, b) => a - b);\r\n    pass = deduplicationFunc(lottoList, arrs);\r\n  }\r\n  return arrs;\r\n};\r\nconst makeRandomNumber = (lottoList: myLottoList[]) => {\r\n  const maxLength = 6;\r\n  const maxNumber = 45;\r\n  let pass = false;\r\n  let arrs: number[] = [];\r\n  while (pass) {\r\n    arrs = [];\r\n    for (let i = 0; i < maxLength; i++) {\r\n      let choiseNumber = 0;\r\n      choiseNumber = Math.floor(maxNumber * Math.random() + 1);\r\n      arrs.some((data) => data === choiseNumber)\r\n        ? i--\r\n        : arrs.push(choiseNumber);\r\n    }\r\n    arrs.sort((a, b) => a - b);\r\n    pass = deduplicationFunc(lottoList, arrs);\r\n  }\r\n  return arrs;\r\n};\r\n\r\nconst deduplicationFunc = (lottoList: myLottoList[], testList: number[]) => {\r\n  let pass = true;\r\n  console.log(testList);\r\n  lottoList.forEach(\r\n    (data) =>\r\n      (pass =\r\n        data.myLottoList.filter((myLotto) => myLotto === testList).length > 0\r\n          ? false\r\n          : pass),\r\n  );\r\n  return pass;\r\n};\r\nexport const {\r\n  LOTTOADD,\r\n  LOTTOREMOVE,\r\n  LOTTOANALYZE,\r\n  LOTTOACTIVEKEY,\r\n  LOTTOCAMERA,\r\n  LOTTOTOASTCLOSE,\r\n  LOTTORECOMMEND,\r\n} = lottoSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectMyNumber = (state: RootState) => state.lotto.lottoList;\r\nexport const selectMyStatisticsAppDesc = (state: RootState) =>\r\n  state.lotto.statisticsAppDesc;\r\nexport const selectMyStatisticsMumDesc = (state: RootState) =>\r\n  state.lotto.statisticsNumDesc;\r\nexport const selectAnalyzeNumber = (state: RootState) => state.lotto.suggestion;\r\n\r\nexport default lottoSlice.reducer;\r\n","import Button from '@restart/ui/esm/Button';\r\nimport { useCallback, useState } from 'react';\r\nimport { Col, Toast } from 'react-bootstrap';\r\nimport QrReader from 'react-qr-reader';\r\nimport { useAppDispatch, useAppSelector } from '../../../store/hooks';\r\nimport { LOTTOADD, LOTTOTOASTCLOSE } from '../../../store/lotto';\r\n\r\nfunction LottoQr() {\r\n  const dispatch = useAppDispatch();\r\n  const toast = useAppSelector((state) => state.lotto.toast);\r\n  const [domain, setDomain] = useState<string | null>();\r\n\r\n  const handleError = (err: any) => {\r\n    console.error(err);\r\n  };\r\n\r\n  const handleScan = (scanResult: string | null) => {\r\n    const lottoreg = /dhlottery/g;\r\n    if (scanResult) {\r\n      if (scanResult === domain && lottoreg.test(scanResult)) return;\r\n      setRedux(scanResult);\r\n    }\r\n  };\r\n\r\n  const setRedux = async (scanResult: string) => {\r\n    try {\r\n      setDomain(scanResult);\r\n      const queryData = scanResult.split('v=')[1].split('q');\r\n      const round = Number(queryData[0]);\r\n      const numberList = queryData.slice(1);\r\n      const myNumberList = await myNumberListFunc(numberList);\r\n      dispatch(LOTTOADD({ round, myLottoList: myNumberList, url: scanResult }));\r\n    } catch (err: any) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  const myNumberListFunc = (numberList: string[]) => {\r\n    return numberList.map((data) => {\r\n      let Numbers: number[] = [];\r\n      for (let i = 0; i < 6; i++) {\r\n        Numbers.push(Number(data.substr(i * 2, 2)));\r\n      }\r\n      return Numbers;\r\n    });\r\n  };\r\n  const setClose = () => {\r\n    dispatch(LOTTOTOASTCLOSE());\r\n  };\r\n  return (\r\n    <>\r\n      {/* <Button\r\n        onClick={() =>\r\n          handleScan(\r\n            'https://m.dhlottery.co.kr/qr.do?method=winQr&v=0997q071524404245q151718273144q111215232740q031114212226q2328304042441785483554',\r\n          )\r\n        }\r\n      >\r\n        dd\r\n      </Button> */}\r\n      <Toast onClose={setClose} show={toast} delay={1500} autohide>\r\n        <Toast.Body>추가되었습니다!</Toast.Body>\r\n      </Toast>\r\n      <QrReader\r\n        delay={300}\r\n        onError={handleError}\r\n        onScan={handleScan}\r\n        style={{ width: '100%' }}\r\n      />\r\n    </>\r\n  );\r\n}\r\nexport default LottoQr;\r\n","import { Table } from 'react-bootstrap';\r\nimport { useAppDispatch, useAppSelector } from '../../../store/hooks';\r\nimport { LOTTOACTIVEKEY, LOTTOREMOVE } from '../../../store/lotto';\r\nimport styled from 'styled-components';\r\nimport { GoDiffRemoved } from 'react-icons/go';\r\n\r\nconst Accordion = styled.div`\r\n  width: 100%;\r\n  border-top-left-radius: 0.25rem;\r\n  border-top-right-radius: 0.25rem;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n`;\r\nconst AccordionForm = styled.div`\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n`;\r\nconst AccordionBody = styled.div`\r\n  padding: 1rem 1.25rem;\r\n`;\r\nconst AccordionRemoveButton = styled.div`\r\n  border: 0;\r\n  border-radius: 0;\r\n  overflow-anchor: none;\r\n  cursor: pointer;\r\n`;\r\nconst AccordionHeader = styled.div`\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 1rem 1.25rem;\r\n  font-size: 1rem;\r\n  background-color: ${(props) =>\r\n    props.unselectable === 'on' ? '#d9d9d9' : '#fff'};\r\n  border: 0;\r\n  border-radius: 0;\r\n  overflow-anchor: none;\r\n`;\r\nconst AccordionHeaderButton = styled.button`\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  width: 100%;\r\n  font-size: 1rem;\r\n  color: #212529;\r\n  text-align: left;\r\n  background-color: ${(props) =>\r\n    props.unselectable === 'on' ? '#d9d9d9' : '#fff'};\r\n  border: 0;\r\n  border-radius: 0;\r\n  overflow-anchor: none;\r\n`;\r\n\r\nfunction LottoMyNumber() {\r\n  const lottoList = useAppSelector((state) => state.lotto.lottoList);\r\n  const activeKey = useAppSelector((state) => state.lotto.activeKey);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const activeKeyHandler = (key: number, type: 'open' | 'close') => {\r\n    dispatch(LOTTOACTIVEKEY({ key, type }));\r\n  };\r\n\r\n  const removeHandler = (key: number) => {\r\n    dispatch(LOTTOREMOVE({ key }));\r\n  };\r\n\r\n  return (\r\n    <Accordion>\r\n      {lottoList.map((lotto, i) => (\r\n        <AccordionForm key={i}>\r\n          <AccordionHeader\r\n            unselectable={\r\n              activeKey.find((data) => data === i) !== undefined ? 'on' : 'off'\r\n            }\r\n          >\r\n            <AccordionHeaderButton\r\n              onClick={() =>\r\n                activeKeyHandler(\r\n                  i,\r\n                  activeKey.find((data) => data === i) !== undefined\r\n                    ? 'close'\r\n                    : 'open',\r\n                )\r\n              }\r\n              unselectable={\r\n                activeKey.find((data) => data === i) !== undefined\r\n                  ? 'on'\r\n                  : 'off'\r\n              }\r\n            >{`${lotto.round} 회차(${i + 1})\\n ${\r\n              lotto.url\r\n            }`}</AccordionHeaderButton>\r\n            <AccordionRemoveButton onClick={() => removeHandler(i)}>\r\n              <GoDiffRemoved></GoDiffRemoved>\r\n            </AccordionRemoveButton>\r\n          </AccordionHeader>\r\n          {activeKey.find((data) => data === i) !== undefined ? (\r\n            <AccordionBody>\r\n              <Table striped bordered hover size=\"sm\">\r\n                <thead></thead>\r\n                <tbody>\r\n                  {lotto.myLottoList.map((numbers, index) => (\r\n                    <tr key={index}>\r\n                      <td>{index + 1}</td>\r\n                      <td></td>\r\n                      {numbers.map((number) => (\r\n                        <td key={number}>{number}</td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </AccordionBody>\r\n          ) : null}\r\n        </AccordionForm>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\nexport default LottoMyNumber;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { Col, Row, Container, Table, Button, Form } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../store/hooks\";\r\nimport { LOTTOADD, LOTTOANALYZE, LOTTOCAMERA } from \"../../../store/lotto\";\r\nconst BoxForm = styled.div`\r\n  width: 100%;\r\n  overflow: scroll;\r\n`;\r\n\r\nfunction LottoAnalyze() {\r\n  const statisticsNumDesc = useAppSelector(\r\n    (state) => state.lotto.statisticsNumDesc\r\n  );\r\n  const statisticsAppDesc = useAppSelector(\r\n    (state) => state.lotto.statisticsAppDesc\r\n  );\r\n  const suggestion = useAppSelector((state) => state.lotto.suggestion);\r\n  const dispatch = useAppDispatch();\r\n  const [numberList, setNumberList] = useState<number[]>([]);\r\n\r\n  useEffect(() => {\r\n    setNumberListFuntion();\r\n  }, []);\r\n\r\n  const setNumberListFuntion = () => {\r\n    let List = [];\r\n    for (let i = 0; i < 45; i++) {\r\n      List.push(i + 1);\r\n    }\r\n    setNumberList(List);\r\n  };\r\n\r\n  return (\r\n    <BoxForm>\r\n      <h4>번호 순</h4>\r\n      <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            {numberList.map((num) => (\r\n              <td key={num}>{num}</td>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            {numberList.map((num) => {\r\n              const findObj = statisticsNumDesc.find(\r\n                (data) => data.num === num\r\n              );\r\n              const appearance = findObj?.appearance ? findObj?.appearance : 0;\r\n              return <td key={num}>{appearance}</td>;\r\n            })}\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n      <h4>많이 나온 순</h4>\r\n      <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            {statisticsAppDesc.map((data) => (\r\n              <td key={data.num}>{data.num}</td>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            {statisticsAppDesc.map((data) => (\r\n              <td key={data.num}>{data.appearance}</td>\r\n            ))}\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    </BoxForm>\r\n  );\r\n}\r\nexport default LottoAnalyze;\r\n","import { Table, Button, Form } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../../store/hooks';\r\nimport { BiRefresh } from 'react-icons/bi';\r\nimport { LOTTORECOMMEND } from '../../../store/lotto';\r\nconst ButtonBox = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 3fr 1fr;\r\n`;\r\nconst Rotate = styled.div`\r\n  transition: all ease 1s;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  &:hover {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\nfunction LottoRecommend() {\r\n  const recommendList = useAppSelector((state) => state.lotto.recommendList);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onClickRecommend = () => {\r\n    dispatch(LOTTORECOMMEND());\r\n  };\r\n  return (\r\n    <>\r\n      <ButtonBox>\r\n        <Button onClick={onClickRecommend} variant=\"outline-secondary\">\r\n          추첨하기{' '}\r\n        </Button>\r\n        <Rotate onClick={onClickRecommend}>\r\n          <BiRefresh size={'100%'}></BiRefresh>\r\n        </Rotate>\r\n      </ButtonBox>\r\n\r\n      <Table striped bordered hover size=\"sm\">\r\n        <tbody>\r\n          {recommendList.map((data) => (\r\n            <tr>\r\n              {data.map((number) => (\r\n                <td>{number}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n}\r\nexport default LottoRecommend;\r\n","import { useState } from 'react';\r\nimport { Col, Row, Container, Button } from 'react-bootstrap';\r\nimport { useAppDispatch, useAppSelector } from '../../../store/hooks';\r\nimport { LOTTOADD, LOTTOANALYZE, LOTTOCAMERA } from '../../../store/lotto';\r\n\r\nimport LottoQr from './LottoQr';\r\nimport LottoMyNumber from './LottoMyNumber';\r\nimport styled from 'styled-components';\r\nimport LottoAnalyze from './LottoAnalyze';\r\nimport LottoRecommend from './LottoRecommend';\r\nconst Box = styled.div`\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  width: 100%;\r\n  padding: 1rem;\r\n`;\r\nfunction LottoQrTemplate() {\r\n  const camera = useAppSelector((state) => state.lotto.camera);\r\n  const suggestion = useAppSelector((state) => state.lotto.suggestion);\r\n  const activeKey = useAppSelector((state) => state.lotto.activeKey);\r\n  const dispatch = useAppDispatch();\r\n  const [test, setTest] = useState<string | null>(\r\n    'https://m.dhlottery.co.kr/qr.do?method=winQr&v=0997q071524404245q151718273144q111215232740q031114212226q2328304042441785483554',\r\n  );\r\n\r\n  const handleScanTest = () => {\r\n    if (test) {\r\n      // setRedux(test);\r\n    }\r\n  };\r\n\r\n  // const setRedux = async (scanResult: string) => {\r\n  //   try {\r\n  //     const queryData = scanResult.split('v=')[1].split('q');\r\n  //     const round = Number(queryData[0]);\r\n  //     const numberList = queryData.slice(1);\r\n  //     const myNumberList = await myNumberListFunc(numberList);\r\n  //     dispatch(LOTTOADD({ round, myLottoList: myNumberList }));\r\n  //   } catch (err: any) {\r\n  //     console.error(err);\r\n  //   }\r\n  // };\r\n  const myNumberListFunc = (numberList: string[]) => {\r\n    return numberList.map((data) => {\r\n      let Numbers: number[] = [];\r\n      for (let i = 0; i < 6; i++) {\r\n        Numbers.push(Number(data.substr(i * 2, 2)));\r\n      }\r\n      return Numbers;\r\n    });\r\n  };\r\n\r\n  const analyzeHandler = () => {\r\n    dispatch(LOTTOANALYZE());\r\n  };\r\n  const cameraHandler = () => {\r\n    dispatch(LOTTOCAMERA());\r\n  };\r\n\r\n  return (\r\n    <Container fluid=\"md\">\r\n      <Row>\r\n        <Col md={12}>\r\n          <Box>\r\n            <h2>\r\n              <strong>제 취미가 로또서 만든 기능입니다</strong>\r\n            </h2>\r\n            <h4>로또를 자동으로 사고 싶은 만큼 사고</h4>\r\n            <h4>그 자동으로 나온 번호를 제 나름의 분석 법을 정의 했고,</h4>\r\n            <h4>그리고 추천 번호 까지 해봅니다.</h4>\r\n            <h4>추천 번호는 5개 숫자 조합으로 </h4>\r\n            <h4>안나온 번호의 n개로 랜덤 조합 1개</h4>\r\n            <h4>나온 번호 top 5로 랜덤 n개의 번호 조합 1개</h4>\r\n            <h4>나온 번호로 랜덤 조합 1개</h4>\r\n            <h4>나머지는 그냥 랜덤 번호입니다.</h4>\r\n            <h4>모두 기본 조합에서 나오지 않은 번호로 만들었습니다.</h4>\r\n          </Box>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col md={4}>\r\n          <Box>\r\n            <h3>QR Code scan</h3>\r\n            <Button variant=\"outline-primary\" onClick={cameraHandler}>\r\n              camera{camera ? ' close' : ' open'}\r\n            </Button>\r\n            {camera ? <LottoQr></LottoQr> : null}\r\n          </Box>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Box>\r\n            <h3>QR List</h3>\r\n            {/* <input onChange={(e) => setTest(e.target.value)}></input>\r\n            <button onClick={handleScanTest}>ddd</button>\r\n            <button onClick={() => console.log(activeKey)}>ddd</button>\r\n            <button onClick={analyzeHandler}>ddd</button> */}\r\n            <LottoMyNumber></LottoMyNumber>\r\n          </Box>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Box>\r\n            <h3>Analyze</h3>\r\n            <LottoAnalyze></LottoAnalyze>\r\n          </Box>\r\n\r\n          <Box>\r\n            <h3>랜덤 추천</h3>\r\n            <LottoRecommend></LottoRecommend>\r\n          </Box>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\nexport default LottoQrTemplate;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router';\r\nimport Home from '../components/home/Home';\r\nimport CoronaMap from '../components/skill/Corona/CoronaMap';\r\nimport LottoQrNumber from '../components/skill/Lotto/LottoTemplate';\r\n\r\nconst ControlRoute: React.FC = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\">\r\n      <Home />\r\n    </Route>\r\n    <Route path=\"/skill/1\">\r\n      <CoronaMap></CoronaMap>\r\n    </Route>\r\n    <Route path=\"/skill/2\">\r\n      <LottoQrNumber></LottoQrNumber>\r\n    </Route>\r\n    <Route path=\"*\">\r\n      <Home />\r\n    </Route>\r\n  </Switch>\r\n);\r\nexport default ControlRoute;\r\n","import { Container } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst FooterComponent = styled.div`\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  background-color: #212528;\r\n  overflow: hidden;\r\n  color: white;\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n`;\r\nconst FooterTitle = styled.h2`\r\n  font-weight: bolder;\r\n  margin-bottom: 1em;\r\n`;\r\nconst FooterText = styled.div`\r\n  margin-top: 0.5rem;\r\n  color: #e2e2e2;\r\n`;\r\nfunction Footer() {\r\n  return (\r\n    <FooterComponent>\r\n      <Container>\r\n        <FooterTitle>박성무의 경력기술서</FooterTitle>\r\n\r\n        <FooterText>만든 사람 : 박성무</FooterText>\r\n        <FooterText>문의 메일 : tjdanqkr@gmail.com</FooterText>\r\n        <FooterText>거주지 : 서울특별시 신림역 인근</FooterText>\r\n        <FooterText>도와준 사람 : 배은지</FooterText>\r\n      </Container>\r\n    </FooterComponent>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import styled, { ThemeProvider } from \"styled-components\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Headers from \"./components/layout/Headers\";\r\nimport { darktheme, lighttheme } from \"./style/theme\";\r\nimport GlobalStyle from \"./style/global-style\";\r\nimport { useAppSelector } from \"./store/hooks\";\r\nimport ControlRoute from \"./router\";\r\nimport Footer from \"./components/layout/Footer\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nconst MyContainer = styled.div`\r\n  background-color: ${(props) => props.theme.mainBackground};\r\n  color: ${(props) => props.theme.color};\r\n  position: relative;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\nconst Main = styled.div`\r\n  min-height: 100%;\r\n  margin-bottom: 2em;\r\n  margin-top: 2em;\r\n`;\r\n\r\nfunction App() {\r\n  const mode = useAppSelector((state) => state.theme.mode);\r\n  return (\r\n    <ThemeProvider theme={mode === \"dark\" ? darktheme : lighttheme}>\r\n      <GlobalStyle />\r\n      <MyContainer>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n          <header>\r\n            <Headers></Headers>\r\n          </header>\r\n          <main>\r\n            <Main>\r\n              <ControlRoute></ControlRoute>\r\n            </Main>\r\n          </main>\r\n          <footer>\r\n            <Footer></Footer>\r\n          </footer>\r\n        </BrowserRouter>\r\n      </MyContainer>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://tjdanqkr.kro.kr';\r\n\r\nconst coronaApi = async (start = 1000) => {\r\n  const res = await axios.get(`/corona/${start}/`);\r\n  return res;\r\n};\r\nexport default coronaApi;\r\n","import { AxiosResponse } from 'axios';\r\nimport { put, takeEvery, call } from 'redux-saga/effects';\r\nimport coronaApi from '../../api/corona';\r\nimport { coronaDataType } from '.';\r\n\r\ntype coronaResType = {\r\n  Corona19Status: SuccessType;\r\n};\r\ntype SuccessType = {\r\n  corona: coronaDataType[];\r\n  maxLength: number;\r\n};\r\ntype actionType = {\r\n  index: number;\r\n  type: string;\r\n};\r\n\r\nfunction* callCoronaApi(action: actionType) {\r\n  try {\r\n    const corona: AxiosResponse<coronaResType> = yield call(\r\n      coronaApi,\r\n      action.index,\r\n    );\r\n\r\n    yield put({\r\n      type: 'corona/SUSSESS_CORONA',\r\n      payload: corona.data,\r\n    });\r\n  } catch (e) {\r\n    if (e instanceof Error) {\r\n      yield put({\r\n        type: 'corona/FAIL_CORONA',\r\n        payload: e.message,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport function* getCoronaApi() {\r\n  yield takeEvery('GET_CORONA', callCoronaApi);\r\n}\r\n","import { all } from '@redux-saga/core/effects';\r\nimport { getCoronaApi } from '../corona/coronaSaga';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([getCoronaApi()]);\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport type { RootState } from '..';\r\n\r\n// Define a type for the slice state\r\nexport interface coronaDataType {\r\n  CORONA19_AREA: string;\r\n  CORONA19_CONTACT_HISTORY: string;\r\n  CORONA19_CORRECTIVE: string;\r\n  CORONA19_COUNTRY: string;\r\n  CORONA19_DATE: string;\r\n  CORONA19_ID: string;\r\n  CORONA19_IDATE: string;\r\n  CORONA19_LEAVE_STATUS: string;\r\n  CORONA19_MOVING_PATH: string;\r\n  CORONA19_NO: string;\r\n  CORONA19_PERSONAL: string;\r\n  CORONA19_TRAVEL_HISTORY: string;\r\n}\r\ntype IState = {\r\n  corona: coronaDataType[];\r\n  maxLength: number;\r\n  index: number;\r\n  message: string;\r\n};\r\n// Define the initial state using that type\r\nconst initialState: IState = {\r\n  corona: [],\r\n  maxLength: 1000,\r\n  index: 1,\r\n  message: '',\r\n};\r\n\r\ninterface IError {\r\n  message: string;\r\n}\r\n\r\nexport const corona = createSlice({\r\n  name: 'corona',\r\n  initialState,\r\n  reducers: {\r\n    SUSSESS_CORONA: (state, action: PayloadAction<IState>) => {\r\n      const concatList = state.corona.concat(action.payload.corona);\r\n      const maxLength = action.payload.maxLength;\r\n      state.corona = concatList;\r\n      state.maxLength = maxLength;\r\n      state.index =\r\n        maxLength <= state.index + 1000 ? maxLength : state.index + 1000;\r\n    },\r\n    FAIL_CORONA: (state, action: PayloadAction<IError>) => {\r\n      state.message = action.payload.message;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { SUSSESS_CORONA, FAIL_CORONA } = corona.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectCoronaMembers = (state: RootState) => state.corona;\r\n\r\nexport default corona.reducer;\r\n","import createSagaMiddleware from '@redux-saga/core';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport rootSaga from './saga';\r\nimport themeMode from './themeMode';\r\nimport corona from './corona';\r\nimport toggle from './toggle';\r\nimport lotto from './lotto';\r\nconst isDev = process.env.NODE_ENV !== 'production';\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst createStore = () => {\r\n  const store = configureStore({\r\n    reducer: {\r\n      theme: themeMode,\r\n      corona: corona,\r\n      toggle: toggle,\r\n      lotto: lotto,\r\n    },\r\n    devTools: isDev,\r\n    middleware: [sagaMiddleware],\r\n  });\r\n  sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\nexport const store = createStore();\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}