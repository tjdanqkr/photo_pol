{"version":3,"sources":["store/hooks.ts","store/themeMode/index.ts","components/layout/Headers.tsx","style/theme.ts","style/global-style.ts","components/home/Home.tsx","router/index.tsx","components/layout/Footer.tsx","App.tsx","reportWebVitals.ts","store/index.ts","index.tsx"],"names":["useAppSelector","useSelector","initialState","mode","localStorage","getItem","themeSlice","createSlice","name","reducers","darkMode","state","setItem","lightMode","actions","Headers","theme","dispatch","useDispatch","Navbar","collapseOnSelect","expand","bg","variant","sticky","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Button","onClick","darktheme","mainBackground","color","title","primaryText","secondaryText","disable","border","divider","background","tableHeader","response","lighttheme","GlobalStyle","createGlobalStyle","styled","div","Home","Row","Col","md","ControlRoute","path","exact","component","to","FooterComponent","Footer","MyContainer","props","Main","App","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","themeMode","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5b6952d.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport type { RootState } from '../../store';\r\n\r\n// Define a type for the slice state\r\ninterface ThemeState {\r\n  mode: 'dark' | 'light';\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: ThemeState = {\r\n  mode: localStorage.getItem('mode') === 'dark' ? 'dark' : 'light',\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n  name: 'theme',\r\n  initialState,\r\n  reducers: {\r\n    darkMode: (state) => {\r\n      localStorage.setItem('mode', 'dark');\r\n      state.mode = 'dark';\r\n    },\r\n    lightMode: (state) => {\r\n      localStorage.setItem('mode', 'light');\r\n      state.mode = 'light';\r\n    },\r\n  },\r\n});\r\n\r\nexport const { darkMode, lightMode } = themeSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectTheme = (state: RootState) => state.theme.mode;\r\n\r\nexport default themeSlice.reducer;\r\n","import { Container, Nav, Navbar, NavDropdown, Button } from 'react-bootstrap';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { darkMode, lightMode } from '../../store/themeMode';\r\nfunction Headers() {\r\n  const mode = useAppSelector((state) => state.theme.mode);\r\n  const dispatch = useAppDispatch();\r\n  return (\r\n    <Navbar collapseOnSelect expand=\"md\" bg={mode} variant={mode} sticky=\"top\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#home\">박성무의 경력기술서</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"me-auto\">\r\n            <Nav.Link href=\"/\">Home</Nav.Link>\r\n            <Nav.Link href=\"#pricing\">Modules</Nav.Link>\r\n            {/* <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">\r\n                Another action\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">\r\n                Separated link\r\n              </NavDropdown.Item>\r\n            </NavDropdown> */}\r\n          </Nav>\r\n          <Nav>\r\n            <Button\r\n              variant={mode === 'dark' ? 'secondary' : 'dark'}\r\n              onClick={() => {\r\n                mode === 'dark' ? dispatch(lightMode()) : dispatch(darkMode());\r\n              }}\r\n            >\r\n              {mode === 'dark' ? 'light' : 'dark'}\r\n            </Button>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Headers;\r\n","import styled, { css, DefaultTheme } from 'styled-components';\r\n\r\nconst darktheme: DefaultTheme = {\r\n  mainBackground: `#333`,\r\n\r\n  color: `rgba(255,255,255,0.85)`,\r\n  title: `rgba(255,255,255,0.85)`,\r\n  primaryText: `rgba(255,255,255,0.65)`,\r\n  secondaryText: `rgba(255,255,255,0.45)`,\r\n  disable: `rgba(255,255,255,0.25)`,\r\n  border: `rgba(255,255,255,0.15)`,\r\n  divider: `rgba(255,255,255,0.06)`,\r\n  background: `rgba(255,255,255,0.04)`,\r\n  tableHeader: `rgba(255,255,255,0.02)`,\r\n\r\n  response: {},\r\n};\r\n\r\nconst lighttheme: DefaultTheme = {\r\n  mainBackground: `#fff`,\r\n\r\n  color: `rgba(0, 0, 0, 0.85)`,\r\n  title: `rgba(0, 0, 0, 0.85)`,\r\n  primaryText: `rgba(0, 0, 0, 0.75)`,\r\n  secondaryText: `rgba(0, 0, 0, 0.45)`,\r\n  disable: `rgba(0, 0, 0, 0.25)`,\r\n  border: `rgba(0, 0, 0, 0.15)`,\r\n  divider: `rgba(0, 0, 0, 0.06)`,\r\n  background: `rgba(0, 0, 0, 0.04)`,\r\n  tableHeader: `rgba(0, 0, 0, 0.02)`,\r\n\r\n  response: {},\r\n};\r\n\r\nexport { darktheme, lighttheme };\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  html,\r\n  body {\r\n    height: 100%;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import { Col, Row, Button, Accordion, Card } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { darkMode, lightMode } from '../../store/themeMode';\r\nconst InstarBox = styled.div``;\r\n\r\nfunction Home() {\r\n  const mode = useAppSelector((state) => state.theme.mode);\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col md={12}>\r\n          <h2>프로젝트 소개</h2>\r\n\r\n          <p>현 프로젝트는 react를 사용하여 만들어 졌습니다.</p>\r\n          <p>사용 기술로는 </p>\r\n          <p>\r\n            <strong>redux-toolkit</strong>, <strong>redux-saga</strong>,{' '}\r\n            <strong>kakaomapApi</strong>, <strong>styled-components</strong>,{' '}\r\n            <strong>bootstrap</strong>, <strong>typescript</strong>\r\n          </p>\r\n          <p>로 만들었습니다.</p>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col md={12}>\r\n          {/* <h2>프로젝트 소개</h2> */}\r\n          <h2>사용 기술 소개</h2>\r\n          <p>현 프로젝트는 react를 사용하여 만들어 졌습니다.</p>\r\n          <p>사용 기술로는 </p>\r\n          <p>\r\n            <strong>redux-toolkit</strong>, <strong>redux-saga</strong>,{' '}\r\n            <strong>kakaomapApi</strong>, <strong>styled-components</strong>,{' '}\r\n            <strong>bootstrap</strong>, <strong>typescript</strong>\r\n          </p>\r\n          <p>로 만들었습니다.</p>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\r\nimport { Redirect, Route, Switch } from 'react-router';\r\nimport Home from '../components/home/Home';\r\n\r\nconst ControlRoute: React.FC = () => (\r\n  <HashRouter>\r\n    <Route path=\"/\" exact component={Home} />\r\n    {/* <Route path=\"/modules\" component={} /> */}\r\n\r\n    <Redirect path=\"*\" to=\"/\" />\r\n  </HashRouter>\r\n);\r\nexport default ControlRoute;\r\n","import { Container, Nav, Navbar } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { darkMode, lightMode } from '../../store/themeMode';\r\nconst FooterComponent = styled.div`\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  background-color: #212528;\r\n  overflow: hidden;\r\n  color: white;\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n`;\r\nfunction Footer() {\r\n  return (\r\n    <FooterComponent>\r\n      <Container>\r\n        <h2>\r\n          <strong>박성무의 경력기술서</strong>\r\n        </h2>\r\n        <div>만든 사람 : 박성무</div>\r\n        <div>문의 메일: tjdanqkr@gmail.com</div>\r\n        <div>거주지: 서울특별시 신림역 인근</div>\r\n      </Container>\r\n    </FooterComponent>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import styled, { ThemeProvider } from 'styled-components';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Headers from './components/layout/Headers';\nimport { darktheme, lighttheme } from './style/theme';\nimport GlobalStyle from './style/global-style';\nimport { useAppSelector } from './store/hooks';\nimport { Container } from 'react-bootstrap';\nimport ControlRoute from './router';\nimport Footer from './components/layout/Footer';\nconst MyContainer = styled.div`\n  background-color: ${(props) => props.theme.mainBackground};\n  color: ${(props) => props.theme.color};\n  position: relative;\n  min-height: 100vh;\n  display: grid;\n  // align-content: space-between;\n  grid-template-rows: 1fr 12fr;\n`;\nconst Main = styled.div`\n  padding-top: 1em;\n  min-height: 100%;\n`;\n\nfunction App() {\n  const mode = useAppSelector((state) => state.theme.mode);\n  return (\n    <ThemeProvider theme={mode === 'dark' ? darktheme : lighttheme}>\n      <GlobalStyle />\n      <MyContainer>\n        <header>\n          <Headers></Headers>\n        </header>\n        <main>\n          <Main>\n            <Container fluid=\"md\">\n              <ControlRoute></ControlRoute>\n            </Container>\n          </Main>\n        </main>\n        <footer>\n          <Footer></Footer>\n        </footer>\n      </MyContainer>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport themeMode from './themeMode';\r\nconst isDev = process.env.NODE_ENV !== 'production';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    theme: themeMode,\r\n  },\r\n  devTools: isDev,\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}