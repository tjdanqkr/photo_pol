{"version":3,"sources":["store/hooks.ts","store/themeMode/index.ts","components/layout/Headers.tsx","style/theme.ts","style/global-style.ts","img/logo.svg","store/toggle/index.ts","components/home/Home.tsx","components/layout/Table/TableHeader.tsx","components/layout/Table/TableBody.tsx","components/layout/Table/TableFilter.tsx","components/layout/Table/TableForm.tsx","components/skill/CoronaMap.tsx","components/skill/LottoQrNumber.tsx","router/index.tsx","components/layout/Footer.tsx","App.tsx","reportWebVitals.ts","api/corona.ts","store/corona/coronaSaga.ts","store/saga/index.ts","store/corona/index.ts","store/lotto/index.ts","store/index.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","mode","localStorage","getItem","themeSlice","createSlice","name","reducers","darkMode","state","setItem","lightMode","actions","HeaderForm","styled","div","Headers","theme","dispatch","Navbar","collapseOnSelect","expand","bg","variant","sticky","Container","style","fontWeight","Brand","as","Link","to","Toggle","Collapse","id","Nav","className","NavDropdown","title","Item","href","Button","onClick","darktheme","mainBackground","color","primaryText","secondaryText","disable","border","divider","background","tableHeader","oddBackground","response","lighttheme","GlobalStyle","createGlobalStyle","toggleSlice","img","alt","open","content","onClickToggle","action","payload","Title","H2","H1","TitleText","p","TitleBox","GrayBox","LogoForm","RelativeBox","TechTitle","b","ContentForm","ContentTitle","ContentSub","ToggleArrow","ToggleItemTemplate","ToggleScroll","ToggleItem","Home","toggle","Row","Col","md","fluid","src","logosvg","map","data","i","process","width","height","con","textAlign","length","sub","TableTr","TableTd","TableHeader","props","hedearList","size","TableTrOdd","TableBodyForm","cache","CellMeasurerCache","defaultWidth","fixedWidth","TableBody","renderList","listRef","useRef","Column","index","key","parent","rowData","columnIndex","rowIndex","onScroll","e","target","scrollTop","scrollLeft","Grid","current","handleScrollEvent","handleScroll","autoHide","ref","overscanRowCount","rowCount","rowHeight","rowRenderer","deferredMeasurementCache","containerStyle","overflow","TableFilter","TableForm","getList","CoronaMap","corona","getCorona","useCallback","type","useEffect","filterType","custom","LottoQrNumber","lotto","lottoList","statistics","suggestion","delay","onError","err","console","error","onScan","log","ControlRoute","exact","path","FooterComponent","FooterTitle","h2","FooterText","Footer","MyContainer","Main","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","axios","defaults","baseURL","coronaApi","a","start","get","res","callCoronaApi","getCoronaApi","call","put","Error","message","takeEvery","rootSaga","all","maxLength","SUSSESS_CORONA","concatList","concat","FAIL_CORONA","lottoSlice","add","remove","analyze","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","themeMode","userLog","devTools","middleware","run","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6fdf5b3.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport type { RootState } from '../../store';\r\n\r\n// Define a type for the slice state\r\ninterface ThemeState {\r\n  mode: 'dark' | 'light';\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: ThemeState = {\r\n  mode: localStorage.getItem('mode') === 'dark' ? 'dark' : 'light',\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n  name: 'theme',\r\n  initialState,\r\n  reducers: {\r\n    darkMode: (state) => {\r\n      localStorage.setItem('mode', 'dark');\r\n      state.mode = 'dark';\r\n    },\r\n    lightMode: (state) => {\r\n      localStorage.setItem('mode', 'light');\r\n      state.mode = 'light';\r\n    },\r\n  },\r\n});\r\n\r\nexport const { darkMode, lightMode } = themeSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectTheme = (state: RootState) => state.theme.mode;\r\n\r\nexport default themeSlice.reducer;\r\n","import { Container, Nav, Navbar, NavDropdown, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { darkMode, lightMode } from '../../store/themeMode';\r\nconst HeaderForm = styled.div`\r\n  font-weight: bolder;\r\n`;\r\nfunction Headers() {\r\n  const mode = useAppSelector((state) => state.theme.mode);\r\n  const dispatch = useAppDispatch();\r\n  return (\r\n    <HeaderForm>\r\n      <Navbar\r\n        collapseOnSelect\r\n        expand=\"md\"\r\n        bg={mode}\r\n        variant={mode}\r\n        sticky=\"top\"\r\n      >\r\n        <Container style={{ fontWeight: 'bolder' }}>\r\n          <Navbar.Brand as={Link} to=\"/\">\r\n            <h2>\r\n              <b>박성무의 경력기술서</b>\r\n            </h2>\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"me-auto\">\r\n              <Nav.Link as={Link} to=\"/userlog\">\r\n                <strong>profile</strong>\r\n              </Nav.Link>\r\n\r\n              <Nav.Link as={Link} to=\"/userlog\"></Nav.Link>\r\n              <NavDropdown title=\"skill\" id=\"collasible-nav-dropdown\">\r\n                <NavDropdown.Item as={Link} to=\"/skill/1\">\r\n                  corona\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/skill/2\">Lotto</NavDropdown.Item>\r\n              </NavDropdown>\r\n              <Nav.Link as={Link} to=\"/userlog\">\r\n                <strong>self-introduction</strong>\r\n              </Nav.Link>\r\n              <Nav.Link as={Link} to=\"/userlog\">\r\n                <strong>etc</strong>\r\n              </Nav.Link>\r\n              {/* <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">\r\n                Another action\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">\r\n                Separated link\r\n              </NavDropdown.Item>\r\n            </NavDropdown> */}\r\n            </Nav>\r\n            <Nav>\r\n              <Button\r\n                variant={mode === 'dark' ? 'secondary' : 'dark'}\r\n                onClick={() => {\r\n                  mode === 'dark'\r\n                    ? dispatch(lightMode())\r\n                    : dispatch(darkMode());\r\n                }}\r\n              >\r\n                {mode === 'dark' ? 'light' : 'dark'}\r\n              </Button>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </HeaderForm>\r\n  );\r\n}\r\n\r\nexport default Headers;\r\n","import { DefaultTheme } from 'styled-components';\r\n\r\nconst darktheme: DefaultTheme = {\r\n  mainBackground: `#333`,\r\n\r\n  color: `rgba(255,255,255,0.85)`,\r\n  title: `rgba(255,255,255,0.85)`,\r\n  primaryText: `rgba(255,255,255,0.65)`,\r\n  secondaryText: `rgba(255,255,255,0.45)`,\r\n  disable: `rgba(255,255,255,0.25)`,\r\n  border: `rgba(255,255,255,0.15)`,\r\n  divider: `rgba(255,255,255,0.06)`,\r\n  background: `rgba(255,255,255,0.04)`,\r\n  tableHeader: `rgba(255,255,255,0.02)`,\r\n  oddBackground: `rgba(0, 0, 0, 0.85)`,\r\n  response: {},\r\n};\r\n\r\nconst lighttheme: DefaultTheme = {\r\n  mainBackground: `#fff`,\r\n\r\n  color: `rgba(0, 0, 0, 0.85)`,\r\n  title: `rgba(0, 0, 0, 0.85)`,\r\n  primaryText: `rgba(0, 0, 0, 0.75)`,\r\n  secondaryText: `rgba(0, 0, 0, 0.45)`,\r\n  disable: `rgba(0, 0, 0, 0.25)`,\r\n  border: `rgba(0, 0, 0, 0.15)`,\r\n  divider: `rgba(0, 0, 0, 0.06)`,\r\n  background: `rgba(0, 0, 0, 0.04)`,\r\n  tableHeader: `rgba(0, 0, 0, 0.02)`,\r\n  oddBackground: `rgba(255,255,255,0.85)`,\r\n\r\n  response: {},\r\n};\r\n\r\nexport { darktheme, lighttheme };\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  html,\r\n  body {\r\n    height: 100%;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"../../store\";\r\n\r\nconst initialState = [\r\n  {\r\n    img: \"img/toggleImg/db.png\",\r\n    alt: \"DB\",\r\n    open: false,\r\n    content: [\r\n      {\r\n        img: \"/img/ProfilesIcons/DB/mongoDB.png\",\r\n        alt: \"MongoDB\",\r\n      },\r\n      {\r\n        img: \"/img/ProfilesIcons/DB/MySQL-Logo.png\",\r\n        alt: \"MySQL\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    img: \"img/toggleImg/windows.png\",\r\n    alt: \"OS\",\r\n    open: false,\r\n    content: [\r\n      {\r\n        img: \"img/ProfilesIcons/OS/Windows_logo.png\",\r\n        alt: \"Windows\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/OS/linux_logo.png\",\r\n        alt: \"Linux\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    img: \"img/toggleImg/programing.png\",\r\n    alt: \"언어\",\r\n    open: false,\r\n    content: [\r\n      {\r\n        img: \"img/ProfilesIcons/lang/JavaScript.png\",\r\n        alt: \"JavaScript\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/ts.png\",\r\n        alt: \"TypeScript\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/Java_Logo.png\",\r\n        alt: \"Java\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/python-logo.png\",\r\n        alt: \"Python\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/css.png\",\r\n        alt: \"Css\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/HTML5.png\",\r\n        alt: \"HTML5\",\r\n      },\r\n\r\n      {\r\n        img: \"img/ProfilesIcons/lang/Expressjs.png\",\r\n        alt: \"Express\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/react.png\",\r\n        alt: \"React\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/nextjs.png\",\r\n        alt: \"Next\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/Spring_Framework_Logo.png\",\r\n        alt: \"Spring\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/lang/Vert.x_Logo.png\",\r\n        alt: \"Vert.x\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    img: \"img/toggleImg/agile.png\",\r\n    alt: \"기타\",\r\n    open: false,\r\n    content: [\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/bootstrap.jpg\",\r\n        alt: \"Bootstrap\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/git_and_github_logo.png\",\r\n        alt: \"Git\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/kakao_map_api.jpg\",\r\n        alt: \"KakaoMapApi\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/navermapApi.png\",\r\n        alt: \"NaverMapApi\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/Redux_Logo.png\",\r\n        alt: \"Redux\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/redux-toolkit.png\",\r\n        alt: \"ReduxToolkit\",\r\n      },\r\n      {\r\n        img: \"img/ProfilesIcons/Etc/styled-components.png\",\r\n        alt: \"Styled-components\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport const toggleSlice = createSlice({\r\n  name: \"toggle\",\r\n  initialState,\r\n  reducers: {\r\n    onClickToggle: (state, action) => {\r\n      state[action.payload].open = !state[action.payload].open;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { onClickToggle } = toggleSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectTheme = (state: RootState) => state.toggle;\r\n\r\nexport default toggleSlice.reducer;\r\n","import { Col, Row, Container } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\nimport logosvg from \"../../img/logo.svg\";\r\nimport { useAppDispatch, useAppSelector } from \"../../store/hooks\";\r\nimport { onClickToggle } from \"../../store/toggle\";\r\nimport \"./Home.css\";\r\nconst Title = styled.div`\r\n  background-color: #212529;\r\n  color: white;\r\n  padding-top: 3em;\r\n  padding-bottom: 3em;\r\n`;\r\nconst H2 = styled.div`\r\n  font-size: 2em;\r\n  font-weight: bold;\r\n`;\r\nconst H1 = styled.div`\r\n  font-size: 2.5em;\r\n  font-weight: bold;\r\n`;\r\nconst TitleText = styled.p`\r\n  color: #e2e2e2;\r\n`;\r\nconst TitleBox = styled.div`\r\n  display: flex;\r\n  align-items: flex-end;\r\n  flex-wrap: wrap;\r\n`;\r\nconst GrayBox = styled.div`\r\n  background-color: #e2e2e2;\r\n  margin-left: 2em;\r\n  margin-right: 2em;\r\n  margin-top: 3em;\r\n  margin-bottom: 3em;\r\n  padding: 1em 4em;\r\n  border-radius: 1em;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  color: black;\r\n`;\r\nconst LogoForm = styled.div`\r\n  position: absolute;\r\n  transform: translate(-1em, -4em);\r\n`;\r\nconst RelativeBox = styled.div`\r\n  position: relative;\r\n  width: 7em;\r\n`;\r\n\r\nconst TechTitle = styled.b`\r\n  font-size: 1.5em;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst ContentForm = styled.div`\r\n  display: flex;\r\n  margin-right: 20 px;\r\n  margin-bottom: 20 px;\r\n  flex-direction: column;\r\n  align-items: stretch;\r\n  height: 30em;\r\n  padding: 3em;\r\n`;\r\n\r\nconst ContentTitle = styled.div`\r\n  font-size: 2em;\r\n`;\r\n\r\nconst ContentSub = styled.div`\r\n  background-color: #b7a9ff;\r\n  height: 100%;\r\n  border-radius: 1em;\r\n  padding: 2em;\r\n`;\r\nconst ToggleArrow = styled.div`\r\n  height: 12px;\r\n  width: 12px;\r\n  transition: all ease 1s;\r\n`;\r\n\r\nconst ToggleItemTemplate = styled.div`\r\n  border-radius: 0 0 2em 2em;\r\n  background-color: #bfbfbf;\r\n  margin: 20px;\r\n  position: relative;\r\n  min-height: 15em;\r\n  max-height: 25em;\r\n  color: black;\r\n  transform: translate(0, -3em);\r\n  z-index: 0;\r\n\r\n  padding: 2em;\r\n  padding-top: 3em;\r\n`;\r\nconst ToggleScroll = styled.div`\r\n  overflow-y: scroll;\r\n  max-height: 15em;\r\n\r\n  &::-webkit-scrollbar {\r\n    /* 스크롤바 막대 너비 설정 */\r\n    width: 6px;\r\n  } /* 스크롤바 막대 설정*/\r\n  &::-webkit-scrollbar-thumb {\r\n    /* 스크롤바 막대 높이 설정 */\r\n    height: 17%;\r\n    background-color: #7d7d7d; /* 스크롤바 둥글게 설정 */\r\n    border-radius: 10px;\r\n  } /* 스크롤바 뒷 배경 설정*/\r\n  &::-webkit-scrollbar-track {\r\n    background-color: rgba(0, 0, 0, 0);\r\n  }\r\n`;\r\nconst ToggleItem = styled.div`\r\n  color: black;\r\n  text-align: center;\r\n`;\r\n\r\ntype content = {\r\n  title: string;\r\n  sub: string;\r\n}[];\r\n\r\nfunction Home() {\r\n  const toggle = useAppSelector((state) => state.toggle);\r\n  const dispatch = useAppDispatch();\r\n  const contentList: content = [\r\n    {\r\n      title: \"1111\",\r\n      sub: \"1111\",\r\n    },\r\n    {\r\n      title: \"2222\",\r\n      sub: \"2222\",\r\n    },\r\n    {\r\n      title: \"3333\",\r\n      sub: \"3333\",\r\n    },\r\n    {\r\n      title: \"4444\",\r\n      sub: \"4444\",\r\n    },\r\n  ];\r\n\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <Row>\r\n          <Col md={12}>\r\n            <Title>\r\n              <Container fluid=\"md\">\r\n                <TitleBox>\r\n                  <H2>실력있는 웹 개발자는&nbsp;</H2> <H1>페이지로&nbsp;</H1>\r\n                  <H2>말한다!</H2>\r\n                </TitleBox>\r\n                <br></br>\r\n                <TitleText>\r\n                  &nbsp;&nbsp;개발자 \"박성무\"만의 사이트를 만들어 말로 설명하지\r\n                  않아도 설득력이 있는 개발자가 되기 위해 경력기술서 사이트를\r\n                  제작하였습니다.\r\n                </TitleText>\r\n              </Container>\r\n            </Title>\r\n          </Col>\r\n        </Row>\r\n      </section>\r\n      <Container fluid=\"md\">\r\n        <section>\r\n          <Row>\r\n            <Col md={12}>\r\n              <GrayBox>\r\n                <strong>현재 페이지는 react를 사용하여 만들어졌습니다.</strong>\r\n                <RelativeBox>\r\n                  <LogoForm>\r\n                    <img src={logosvg} className=\"App-logo\" alt=\"logo\" />\r\n                  </LogoForm>\r\n                </RelativeBox>\r\n              </GrayBox>\r\n            </Col>\r\n          </Row>\r\n        </section>\r\n        <section>\r\n          <Row>\r\n            <Col md={1}></Col>\r\n            <Col md={10}>\r\n              <TechTitle>현재 박성무의 사용기술</TechTitle>\r\n            </Col>\r\n            <Col md={1}></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={1}></Col>\r\n            <Col md={10}>\r\n              <Row>\r\n                {toggle.map((data, i) => (\r\n                  <Col md={6} key={i}>\r\n                    <div\r\n                      className={data.open ? \"ToggleBoxActive\" : \"ToggleBox\"}\r\n                      onClick={() => dispatch(onClickToggle(i))}\r\n                    >\r\n                      <img\r\n                        src={`${process.env.PUBLIC_URL}/${data.img}`}\r\n                        style={{ width: \"100px\", height: \"100px\" }}\r\n                        alt={data.alt}\r\n                      ></img>\r\n                      <h3>\r\n                        <b>{data.alt}</b>\r\n                      </h3>\r\n                      <ToggleArrow>{data.open ? `▲` : `▼`}</ToggleArrow>\r\n                    </div>\r\n                    {data.open ? (\r\n                      <ToggleItemTemplate>\r\n                        <ToggleScroll>\r\n                          {data.content.map((con, i) => (\r\n                            <ToggleItem key={i} style={{ textAlign: \"center\" }}>\r\n                              <img\r\n                                src={`${process.env.PUBLIC_URL}/${con.img}`}\r\n                                alt={con.alt}\r\n                                style={{ width: \"100%\" }}\r\n                              ></img>\r\n                              <b>{`<${con.alt}>`}</b>\r\n                              {data.content.length !== i + 1 ? <hr></hr> : null}\r\n                            </ToggleItem>\r\n                          ))}\r\n                        </ToggleScroll>\r\n                      </ToggleItemTemplate>\r\n                    ) : null}\r\n                  </Col>\r\n                ))}\r\n              </Row>\r\n            </Col>\r\n            <Col md={1}></Col>\r\n          </Row>\r\n        </section>\r\n        <section>\r\n          <Row>\r\n            {contentList.map((data, i) => (\r\n              <Col md={6} key={i}>\r\n                <ContentForm>\r\n                  <ContentTitle>{data.title}</ContentTitle>\r\n                  <ContentSub>{data.sub}</ContentSub>\r\n                </ContentForm>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </section>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import styled from 'styled-components';\r\nimport { TableHeaderType } from './TableForm';\r\n\r\ntype HeaderProps = {\r\n  hedearList: TableHeaderType[];\r\n  width: number;\r\n};\r\n\r\nconst TableTr = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: stretch;\r\n  background-color: white;\r\n  color: black;\r\n  font-weight: bold;\r\n  position: sticky;\r\n`;\r\n\r\nconst TableTd = styled.div`\r\n  border: 1px outset gray;\r\n  border-collapse: collapse;\r\n  padding: 5px;\r\n  font-size: 2em;\r\n`;\r\nfunction TableHeader(props: HeaderProps) {\r\n  const { hedearList, width } = props;\r\n  return (\r\n    <TableTr style={{ width }}>\r\n      {hedearList.map((data, i) => {\r\n        return (\r\n          <TableTd key={i} style={{ width: `${data.size}%` }}>\r\n            {data.name}\r\n          </TableTd>\r\n        );\r\n      })}\r\n    </TableTr>\r\n  );\r\n}\r\nexport default TableHeader;\r\n","import { useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { TableHeaderType } from './TableForm';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport {\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n  List,\r\n  ListRowProps,\r\n  Size,\r\n} from 'react-virtualized';\r\nimport TableHeader from './TableHeader';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\ntype TableProps = {\r\n  renderList: any[];\r\n  hedearList: TableHeaderType[];\r\n  getList: string;\r\n};\r\n\r\nconst TableTr = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: stretch;\r\n  background-color: white;\r\n  color: black;\r\n  font-weight: bold;\r\n  &:hover {\r\n    background-color: aliceblue;\r\n  }\r\n`;\r\n\r\nconst TableTrOdd = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: stretch;\r\n  background-color: #e0e0e0;\r\n  color: black;\r\n  font-weight: bold;\r\n  &:hover {\r\n    background-color: aliceblue;\r\n  }\r\n`;\r\n\r\nconst TableTd = styled.div`\r\n  border: 1px outset gray;\r\n  border-collapse: collapse;\r\n  padding: 5px;\r\n`;\r\nconst TableBodyForm = styled.div`\r\n  height: 1000px;\r\n  overflow: hidden;\r\n`;\r\nconst cache = new CellMeasurerCache({\r\n  defaultWidth: 100,\r\n  fixedWidth: true,\r\n});\r\n\r\nconst TableBody = (props: TableProps) => {\r\n  const { renderList, hedearList } = props;\r\n  const listRef = useRef<List | null>(null);\r\n  const handleScroll = (e: any) => {\r\n    const { scrollTop, scrollLeft } = e.target;\r\n    const Grid = listRef.current?.Grid;\r\n    Grid?.handleScrollEvent({ scrollTop, scrollLeft });\r\n  };\r\n\r\n  const Column = ({ index, key, parent, style }: ListRowProps) => {\r\n    const rowData = renderList[index];\r\n\r\n    return (\r\n      <CellMeasurer\r\n        cache={cache}\r\n        parent={parent}\r\n        key={key}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n      >\r\n        {index % 2 === 0 ? (\r\n          <TableTr style={style}>\r\n            {hedearList.map((data, i) => {\r\n              return (\r\n                <TableTd key={i} style={{ width: `${data.size}%` }}>\r\n                  {rowData[data.key]}\r\n                </TableTd>\r\n              );\r\n            })}\r\n          </TableTr>\r\n        ) : (\r\n          <TableTrOdd style={style}>\r\n            {hedearList.map((data, i) => {\r\n              return (\r\n                <TableTd key={i} style={{ width: `${data.size}%` }}>\r\n                  {rowData[data.key]}\r\n                </TableTd>\r\n              );\r\n            })}\r\n          </TableTrOdd>\r\n        )}\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <TableBodyForm>\r\n      {/* <WindowScroller>\r\n        {({ height, scrollTop, isScrolling, onChildScroll }) => ( */}\r\n      <AutoSizer>\r\n        {({ width, height }: Size) => {\r\n          return (\r\n            <>\r\n              <TableHeader hedearList={hedearList} width={width}></TableHeader>\r\n              <Scrollbars\r\n                onScroll={(e) => handleScroll(e)}\r\n                style={{ height, width }}\r\n                autoHide\r\n              >\r\n                <List\r\n                  ref={listRef}\r\n                  height={height}\r\n                  width={width}\r\n                  // isScrolling={isScrolling}\r\n                  overscanRowCount={0}\r\n                  // onScroll={onChildScroll}\r\n                  // scrollTop={scrollTop}\r\n                  rowCount={renderList.length}\r\n                  rowHeight={cache.rowHeight}\r\n                  rowRenderer={Column}\r\n                  deferredMeasurementCache={cache}\r\n                  containerStyle={{ overflow: 'initial' }}\r\n                ></List>\r\n              </Scrollbars>\r\n            </>\r\n          );\r\n        }}\r\n      </AutoSizer>\r\n      {/* )}\r\n       </WindowScroller> */}\r\n    </TableBodyForm>\r\n  );\r\n};\r\nexport default TableBody;\r\n","import { TableHeaderType } from './TableForm';\r\n\r\ntype FilterProps = {\r\n  name: string;\r\n  hedearList: TableHeaderType[];\r\n};\r\n\r\nfunction TableFilter(props: FilterProps) {\r\n  return <div></div>;\r\n}\r\nexport default TableFilter;\r\n","import TableBody from './TableBody';\r\nimport TableFilter from './TableFilter';\r\n\r\ntype TableProps = {\r\n  renderList: any[];\r\n  hedearList: TableHeaderType[];\r\n  name: string;\r\n  getList: string;\r\n};\r\nexport type TableHeaderType = {\r\n  name: string;\r\n  key: string;\r\n  custom: boolean;\r\n  filterType: string;\r\n  size: number;\r\n  customFuncName?: string;\r\n};\r\n\r\nfunction TableForm(props: TableProps) {\r\n  const { hedearList, name, renderList, getList } = props;\r\n  return (\r\n    <div>\r\n      <TableFilter hedearList={hedearList} name={name}></TableFilter>\r\n      <TableBody\r\n        renderList={renderList}\r\n        hedearList={hedearList}\r\n        getList={getList}\r\n      ></TableBody>\r\n    </div>\r\n  );\r\n}\r\nexport default TableForm;\r\n","import { useCallback, useEffect } from 'react';\r\nimport { Col, Row, Container } from 'react-bootstrap';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport TableForm, { TableHeaderType } from '../layout/Table/TableForm';\r\n\r\nfunction CoronaMap() {\r\n  const corona = useAppSelector((state) => state.corona.corona);\r\n  const index = useAppSelector((state) => state.corona.index);\r\n  const coronaHeader: TableHeaderType[] = [\r\n    {\r\n      key: 'CORONA19_DATE',\r\n      name: '확진일',\r\n      size: 10,\r\n      filterType: 'date',\r\n      custom: false,\r\n    },\r\n    // {\r\n    //   key: 'CORONA19_NO',\r\n    //   name: '환자번호',\r\n    //   size: 5,\r\n    //   filterType: 'number',\r\n    //   custom: false,\r\n    // },\r\n    {\r\n      key: 'CORONA19_COUNTRY',\r\n      name: '국적',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n\r\n    {\r\n      key: 'CORONA19_PERSONAL',\r\n      name: '환자정보',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_AREA',\r\n      name: '지역',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_TRAVEL_HISTORY',\r\n      name: '여행력',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_CONTACT_HISTORY',\r\n      name: '접촉력',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_CORRECTIVE',\r\n      name: '조치사항',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_LEAVE_STATUS',\r\n      name: '상태',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_MOVING_PATH',\r\n      name: '이동경로',\r\n      size: 10,\r\n      filterType: 'string',\r\n      custom: false,\r\n    },\r\n    {\r\n      key: 'CORONA19_IDATE',\r\n      name: '등록일',\r\n      size: 10,\r\n      filterType: 'date',\r\n      custom: false,\r\n    },\r\n  ];\r\n  const dispatch = useAppDispatch();\r\n  const getCorona = useCallback(() => {\r\n    dispatch({\r\n      type: 'GET_CORONA',\r\n      index,\r\n    });\r\n  }, [dispatch, index]);\r\n  useEffect(() => {\r\n    if (corona.length === 0) {\r\n      getCorona();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Container fluid=\"md\">\r\n      <Row>\r\n        <Col md={12}>\r\n          <TableForm\r\n            hedearList={coronaHeader}\r\n            name=\"corona\"\r\n            renderList={corona}\r\n            getList=\"GET_CORONA\"\r\n          ></TableForm>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CoronaMap;\r\n","import { useCallback, useEffect } from 'react';\r\nimport QrReader from 'react-qr-reader';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\n\r\nfunction LottoQrNumber() {\r\n  const lottoList = useAppSelector((state) => state.lotto.lottoList);\r\n  const statistics = useAppSelector((state) => state.lotto.statistics);\r\n  const suggestion = useAppSelector((state) => state.lotto.suggestion);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleScan = (data: any) => {\r\n    if (data) {\r\n      console.log(data);\r\n    }\r\n  };\r\n  const handleError = (err: any) => {\r\n    console.error(err);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <QrReader\r\n          delay={300}\r\n          onError={handleError}\r\n          onScan={handleScan}\r\n          style={{ width: '100%' }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default LottoQrNumber;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router';\r\nimport Home from '../components/home/Home';\r\nimport CoronaMap from '../components/skill/CoronaMap';\r\nimport LottoQrNumber from '../components/skill/LottoQrNumber';\r\n\r\nconst ControlRoute: React.FC = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\">\r\n      <Home />\r\n    </Route>\r\n    <Route path=\"/skill/1\">\r\n      <CoronaMap></CoronaMap>\r\n    </Route>\r\n    <Route path=\"/skill/2\">\r\n      <LottoQrNumber></LottoQrNumber>\r\n    </Route>\r\n    <Route path=\"*\">\r\n      <Home />\r\n    </Route>\r\n  </Switch>\r\n);\r\nexport default ControlRoute;\r\n","import { Container } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst FooterComponent = styled.div`\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  background-color: #212528;\r\n  overflow: hidden;\r\n  color: white;\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n`;\r\nconst FooterTitle = styled.h2`\r\n  font-weight: bolder;\r\n  margin-bottom: 1em;\r\n`;\r\nconst FooterText = styled.div`\r\n  margin-top: 0.5rem;\r\n  color: #e2e2e2;\r\n`;\r\nfunction Footer() {\r\n  return (\r\n    <FooterComponent>\r\n      <Container>\r\n        <FooterTitle>박성무의 경력기술서</FooterTitle>\r\n\r\n        <FooterText>만든 사람 : 박성무</FooterText>\r\n        <FooterText>문의 메일 : tjdanqkr@gmail.com</FooterText>\r\n        <FooterText>거주지 : 서울특별시 신림역 인근</FooterText>\r\n        <FooterText>도와준 사람 : 배은지</FooterText>\r\n      </Container>\r\n    </FooterComponent>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import styled, { ThemeProvider } from 'styled-components';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Headers from './components/layout/Headers';\r\nimport { darktheme, lighttheme } from './style/theme';\r\nimport GlobalStyle from './style/global-style';\r\nimport { useAppSelector } from './store/hooks';\r\nimport ControlRoute from './router';\r\nimport Footer from './components/layout/Footer';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\nconst MyContainer = styled.div`\r\n  background-color: ${(props) => props.theme.mainBackground};\r\n  color: ${(props) => props.theme.color};\r\n  position: relative;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\nconst Main = styled.div`\r\n  min-height: 100%;\r\n  margin-bottom: 2em;\r\n`;\r\n\r\nfunction App() {\r\n  const mode = useAppSelector((state) => state.theme.mode);\r\n  return (\r\n    <ThemeProvider theme={mode === 'dark' ? darktheme : lighttheme}>\r\n      <GlobalStyle />\r\n      <MyContainer>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n          <header>\r\n            <Headers></Headers>\r\n          </header>\r\n          <main>\r\n            <Main>\r\n              <ControlRoute></ControlRoute>\r\n            </Main>\r\n          </main>\r\n          <footer>\r\n            <Footer></Footer>\r\n          </footer>\r\n        </BrowserRouter>\r\n      </MyContainer>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://tjdanqkr.kro.kr';\r\n\r\nconst coronaApi = async (start = 1000) => {\r\n  const res = await axios.get(`/corona/${start}/`);\r\n  return res;\r\n};\r\nexport default coronaApi;\r\n","import { AxiosResponse } from 'axios';\r\nimport { put, takeEvery, call } from 'redux-saga/effects';\r\nimport coronaApi from '../../api/corona';\r\nimport { coronaDataType } from '.';\r\n\r\ntype coronaResType = {\r\n  Corona19Status: SuccessType;\r\n};\r\ntype SuccessType = {\r\n  corona: coronaDataType[];\r\n  maxLength: number;\r\n};\r\ntype actionType = {\r\n  index: number;\r\n  type: string;\r\n};\r\n\r\nfunction* callCoronaApi(action: actionType) {\r\n  try {\r\n    const corona: AxiosResponse<coronaResType> = yield call(\r\n      coronaApi,\r\n      action.index,\r\n    );\r\n\r\n    yield put({\r\n      type: 'corona/SUSSESS_CORONA',\r\n      payload: corona.data,\r\n    });\r\n  } catch (e) {\r\n    if (e instanceof Error) {\r\n      yield put({\r\n        type: 'corona/FAIL_CORONA',\r\n        payload: e.message,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport function* getCoronaApi() {\r\n  yield takeEvery('GET_CORONA', callCoronaApi);\r\n}\r\n","import { all } from '@redux-saga/core/effects';\r\nimport { getCoronaApi } from '../corona/coronaSaga';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([getCoronaApi()]);\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport type { RootState } from '..';\r\n\r\n// Define a type for the slice state\r\nexport interface coronaDataType {\r\n  CORONA19_AREA: string;\r\n  CORONA19_CONTACT_HISTORY: string;\r\n  CORONA19_CORRECTIVE: string;\r\n  CORONA19_COUNTRY: string;\r\n  CORONA19_DATE: string;\r\n  CORONA19_ID: string;\r\n  CORONA19_IDATE: string;\r\n  CORONA19_LEAVE_STATUS: string;\r\n  CORONA19_MOVING_PATH: string;\r\n  CORONA19_NO: string;\r\n  CORONA19_PERSONAL: string;\r\n  CORONA19_TRAVEL_HISTORY: string;\r\n}\r\ntype IState = {\r\n  corona: coronaDataType[];\r\n  maxLength: number;\r\n  index: number;\r\n  message: string;\r\n};\r\n// Define the initial state using that type\r\nconst initialState: IState = {\r\n  corona: [],\r\n  maxLength: 1000,\r\n  index: 1,\r\n  message: '',\r\n};\r\n\r\ninterface IError {\r\n  message: string;\r\n}\r\n\r\nexport const corona = createSlice({\r\n  name: 'corona',\r\n  initialState,\r\n  reducers: {\r\n    SUSSESS_CORONA: (state, action: PayloadAction<IState>) => {\r\n      const concatList = state.corona.concat(action.payload.corona);\r\n      const maxLength = action.payload.maxLength;\r\n      state.corona = concatList;\r\n      state.maxLength = maxLength;\r\n      state.index =\r\n        maxLength <= state.index + 1000 ? maxLength : state.index + 1000;\r\n    },\r\n    FAIL_CORONA: (state, action: PayloadAction<IError>) => {\r\n      state.message = action.payload.message;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { SUSSESS_CORONA, FAIL_CORONA } = corona.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectCoronaMembers = (state: RootState) => state.corona;\r\n\r\nexport default corona.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport type { RootState } from '../../store';\r\n\r\n// Define a type for the slice state\r\n\r\ntype statisticsType = {\r\n  num: number;\r\n  appearance: number;\r\n};\r\n\r\ninterface LottoState {\r\n  lottoList: number[][];\r\n  suggestion: number[][];\r\n  statistics: statisticsType[];\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: LottoState = {\r\n  lottoList: [],\r\n  suggestion: [],\r\n  statistics: [],\r\n};\r\n\r\nexport const lottoSlice = createSlice({\r\n  name: 'lotto',\r\n  initialState,\r\n  reducers: {\r\n    add: (state) => {\r\n      console.log(state.lottoList);\r\n    },\r\n    remove: (state) => {\r\n      console.log(state.lottoList);\r\n    },\r\n    analyze: (state) => {\r\n      console.log(state.lottoList);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { add, remove, analyze } = lottoSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectMyNumber = (state: RootState) => state.lotto.lottoList;\r\nexport const selectMyStatisticsNumber = (state: RootState) =>\r\n  state.lotto.statistics;\r\nexport const selectAnalyzeNumber = (state: RootState) => state.lotto.suggestion;\r\n\r\nexport default lottoSlice.reducer;\r\n","import createSagaMiddleware from '@redux-saga/core';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport rootSaga from './saga';\r\nimport themeMode from './themeMode';\r\nimport userLog from './corona';\r\nimport toggle from './toggle';\r\nimport lotto from './lotto';\r\nconst isDev = process.env.NODE_ENV !== 'production';\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst createStore = () => {\r\n  const store = configureStore({\r\n    reducer: {\r\n      theme: themeMode,\r\n      corona: userLog,\r\n      toggle: toggle,\r\n      lotto: lotto,\r\n    },\r\n    devTools: isDev,\r\n    middleware: [sagaMiddleware],\r\n  });\r\n  sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\nexport const store = createStore();\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}