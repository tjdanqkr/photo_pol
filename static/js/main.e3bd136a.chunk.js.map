{"version":3,"sources":["store/hooks.ts","store/themeMode/index.ts","components/layout/Headers.tsx","style/theme.ts","style/global-style.ts","App.tsx","reportWebVitals.ts","store/index.ts","index.tsx"],"names":["useAppSelector","useSelector","initialState","mode","localStorage","getItem","themeSlice","createSlice","name","reducers","darkMode","state","console","log","setItem","lightMode","actions","Headers","theme","dispatch","useDispatch","Navbar","collapseOnSelect","expand","bg","variant","sticky","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Button","onClick","darktheme","mainBackground","color","title","primaryText","secondaryText","disable","border","divider","background","tableHeader","response","lighttheme","GlobalStyle","createGlobalStyle","MyContainer","styled","div","props","Main","App","fluid","Row","Col","md","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","themeMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3bd136a.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport type { RootState } from '../../store';\r\n\r\n// Define a type for the slice state\r\ninterface ThemeState {\r\n  mode: 'dark' | 'light';\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: ThemeState = {\r\n  mode: localStorage.getItem('theme') === 'dark' ? 'dark' : 'light',\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n  name: 'theme',\r\n  initialState,\r\n  reducers: {\r\n    darkMode: (state) => {\r\n      console.log('dark');\r\n\r\n      localStorage.setItem('mode', 'dark');\r\n      state.mode = 'dark';\r\n    },\r\n    lightMode: (state) => {\r\n      console.log('light');\r\n      localStorage.setItem('mode', 'light');\r\n      state.mode = 'light';\r\n    },\r\n  },\r\n});\r\n\r\nexport const { darkMode, lightMode } = themeSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectTheme = (state: RootState) => state.theme.mode;\r\n\r\nexport default themeSlice.reducer;\r\n","import { Container, Nav, Navbar, NavDropdown, Button } from 'react-bootstrap';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { darkMode, lightMode } from '../../store/themeMode';\r\nfunction Headers() {\r\n  const mode = useAppSelector((state) => state.theme.mode);\r\n  const dispatch = useAppDispatch();\r\n  return (\r\n    <Navbar collapseOnSelect expand=\"md\" bg={mode} variant={mode} sticky=\"top\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#home\">박성무의 경력 기술서</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"me-auto\">\r\n            <Nav.Link href=\"#features\">Home</Nav.Link>\r\n            <Nav.Link href=\"#pricing\">Modules</Nav.Link>\r\n            {/* <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">\r\n                Another action\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">\r\n                Separated link\r\n              </NavDropdown.Item>\r\n            </NavDropdown> */}\r\n          </Nav>\r\n          <Nav>\r\n            <Button\r\n              variant={mode === 'dark' ? 'secondary' : 'dark'}\r\n              onClick={() => {\r\n                mode === 'dark' ? dispatch(lightMode()) : dispatch(darkMode());\r\n              }}\r\n            >\r\n              {mode === 'dark' ? 'light' : 'dark'}\r\n            </Button>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Headers;\r\n","import styled, { css, DefaultTheme } from 'styled-components';\r\n\r\nconst darktheme: DefaultTheme = {\r\n  mainBackground: `#333`,\r\n\r\n  color: `rgba(255,255,255,0.85)`,\r\n  title: `rgba(255,255,255,0.85)`,\r\n  primaryText: `rgba(255,255,255,0.65)`,\r\n  secondaryText: `rgba(255,255,255,0.45)`,\r\n  disable: `rgba(255,255,255,0.25)`,\r\n  border: `rgba(255,255,255,0.15)`,\r\n  divider: `rgba(255,255,255,0.06)`,\r\n  background: `rgba(255,255,255,0.04)`,\r\n  tableHeader: `rgba(255,255,255,0.02)`,\r\n\r\n  response: {},\r\n};\r\n\r\nconst lighttheme: DefaultTheme = {\r\n  mainBackground: `#fff`,\r\n\r\n  color: `rgba(0, 0, 0, 0.85)`,\r\n  title: `rgba(0, 0, 0, 0.85)`,\r\n  primaryText: `rgba(0, 0, 0, 0.75)`,\r\n  secondaryText: `rgba(0, 0, 0, 0.45)`,\r\n  disable: `rgba(0, 0, 0, 0.25)`,\r\n  border: `rgba(0, 0, 0, 0.15)`,\r\n  divider: `rgba(0, 0, 0, 0.06)`,\r\n  background: `rgba(0, 0, 0, 0.04)`,\r\n  tableHeader: `rgba(0, 0, 0, 0.02)`,\r\n\r\n  response: {},\r\n};\r\n\r\nexport { darktheme, lighttheme };\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  html,\r\n  body {\r\n    height: 100%;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import styled, { ThemeProvider } from 'styled-components';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Headers from './components/layout/Headers';\nimport { darktheme, lighttheme } from './style/theme';\nimport GlobalStyle from './style/global-style';\nimport { useAppSelector } from './store/hooks';\nimport { Col, Row, Container } from 'react-bootstrap';\nconst MyContainer = styled.div`\n  background-color: ${(props) => props.theme.mainBackground};\n  color: ${(props) => props.theme.color};\n  height: 100%;\n`;\nconst Main = styled.div`\n  height: 100%;\n`;\n\nfunction App() {\n  const mode = useAppSelector((state) => state.theme.mode);\n  return (\n    <ThemeProvider theme={mode === 'dark' ? darktheme : lighttheme}>\n      <GlobalStyle />\n      <MyContainer>\n        <Headers></Headers>\n        <Container fluid=\"md\">\n          <Row>\n            <Col md={'auto'}>\n              <Main>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n                <h2>main</h2>\n              </Main>\n            </Col>\n          </Row>\n        </Container>\n      </MyContainer>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport themeMode from './themeMode';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    theme: themeMode,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}